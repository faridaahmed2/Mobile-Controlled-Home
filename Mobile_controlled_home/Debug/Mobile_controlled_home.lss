
Mobile_controlled_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003116  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003e0  00800060  00003116  000031aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800440  00800440  0000358a  2**0
                  ALLOC
  3 .stab         0000315c  00000000  00000000  0000358c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000168e  00000000  00000000  000066e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008026  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ab5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b908  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ba68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bcf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c4c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__vector_10>
      2c:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__vector_13>
      38:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__vector_14>
      3c:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a0 e4       	ldi	r26, 0x40	; 64
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 35       	cpi	r26, 0x54	; 84
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <main>
      8a:	0c 94 89 18 	jmp	0x3112	; 0x3112 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HBUZZER_TurnOn>:
#include "../Include/HAL/BUZZER/BUZZER_Private.h"
#include "../Include/HAL/BUZZER/BUZZER_Cfg.h"

#define F_CPU 8000000UL

void HBUZZER_TurnOn(DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <HBUZZER_TurnOn+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_SET);
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	6a 81       	ldd	r22, Y+2	; 0x02
     b58:	41 e0       	ldi	r20, 0x01	; 1
     b5a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
}
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <HBUZZER_TurnOff>:

void HBUZZER_TurnOff(DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <HBUZZER_TurnOff+0x6>
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_RESET);
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	6a 81       	ldd	r22, Y+2	; 0x02
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
}
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <MDIO_voidSetPinDirection>:
#include "../Include/MCAL/DIO/DIO_Cfg.h"

#define F_CPU 8000000UL

void MDIO_voidSetPinDirection (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID, DIO_DIRECTION_e A_PINDirection)
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	2d 97       	sbiw	r28, 0x0d	; 13
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	6a 83       	std	Y+2, r22	; 0x02
     ba2:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7) && (A_PINDirection <= DIO_OUTPUT))
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	84 30       	cpi	r24, 0x04	; 4
     ba8:	08 f0       	brcs	.+2      	; 0xbac <MDIO_voidSetPinDirection+0x22>
     baa:	09 c1       	rjmp	.+530    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	88 30       	cpi	r24, 0x08	; 8
     bb0:	08 f0       	brcs	.+2      	; 0xbb4 <MDIO_voidSetPinDirection+0x2a>
     bb2:	05 c1       	rjmp	.+522    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
     bb4:	8b 81       	ldd	r24, Y+3	; 0x03
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	08 f0       	brcs	.+2      	; 0xbbc <MDIO_voidSetPinDirection+0x32>
     bba:	01 c1       	rjmp	.+514    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
	{
		switch (A_DIOPort)
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	3d 87       	std	Y+13, r19	; 0x0d
     bc4:	2c 87       	std	Y+12, r18	; 0x0c
     bc6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bc8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	91 05       	cpc	r25, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <MDIO_voidSetPinDirection+0x48>
     bd0:	4f c0       	rjmp	.+158    	; 0xc70 <MDIO_voidSetPinDirection+0xe6>
     bd2:	2c 85       	ldd	r18, Y+12	; 0x0c
     bd4:	3d 85       	ldd	r19, Y+13	; 0x0d
     bd6:	22 30       	cpi	r18, 0x02	; 2
     bd8:	31 05       	cpc	r19, r1
     bda:	2c f4       	brge	.+10     	; 0xbe6 <MDIO_voidSetPinDirection+0x5c>
     bdc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bde:	9d 85       	ldd	r25, Y+13	; 0x0d
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	71 f0       	breq	.+28     	; 0xc00 <MDIO_voidSetPinDirection+0x76>
     be4:	ec c0       	rjmp	.+472    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
     be6:	2c 85       	ldd	r18, Y+12	; 0x0c
     be8:	3d 85       	ldd	r19, Y+13	; 0x0d
     bea:	22 30       	cpi	r18, 0x02	; 2
     bec:	31 05       	cpc	r19, r1
     bee:	09 f4       	brne	.+2      	; 0xbf2 <MDIO_voidSetPinDirection+0x68>
     bf0:	77 c0       	rjmp	.+238    	; 0xce0 <MDIO_voidSetPinDirection+0x156>
     bf2:	8c 85       	ldd	r24, Y+12	; 0x0c
     bf4:	9d 85       	ldd	r25, Y+13	; 0x0d
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	91 05       	cpc	r25, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <MDIO_voidSetPinDirection+0x74>
     bfc:	a9 c0       	rjmp	.+338    	; 0xd50 <MDIO_voidSetPinDirection+0x1c6>
     bfe:	df c0       	rjmp	.+446    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch (A_PINDirection)
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	3b 87       	std	Y+11, r19	; 0x0b
     c08:	2a 87       	std	Y+10, r18	; 0x0a
     c0a:	8a 85       	ldd	r24, Y+10	; 0x0a
     c0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	31 f0       	breq	.+12     	; 0xc1e <MDIO_voidSetPinDirection+0x94>
     c12:	2a 85       	ldd	r18, Y+10	; 0x0a
     c14:	3b 85       	ldd	r19, Y+11	; 0x0b
     c16:	21 30       	cpi	r18, 0x01	; 1
     c18:	31 05       	cpc	r19, r1
     c1a:	b1 f0       	breq	.+44     	; 0xc48 <MDIO_voidSetPinDirection+0xbe>
     c1c:	d0 c0       	rjmp	.+416    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_PINID);
     c1e:	aa e3       	ldi	r26, 0x3A	; 58
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	ea e3       	ldi	r30, 0x3A	; 58
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <MDIO_voidSetPinDirection+0xb2>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <MDIO_voidSetPinDirection+0xae>
     c40:	80 95       	com	r24
     c42:	84 23       	and	r24, r20
     c44:	8c 93       	st	X, r24
     c46:	bb c0       	rjmp	.+374    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_PINID);
     c48:	aa e3       	ldi	r26, 0x3A	; 58
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	ea e3       	ldi	r30, 0x3A	; 58
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	48 2f       	mov	r20, r24
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	28 2f       	mov	r18, r24
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	02 2e       	mov	r0, r18
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <MDIO_voidSetPinDirection+0xdc>
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	0a 94       	dec	r0
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <MDIO_voidSetPinDirection+0xd8>
     c6a:	84 2b       	or	r24, r20
     c6c:	8c 93       	st	X, r24
     c6e:	a7 c0       	rjmp	.+334    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTB:
			switch (A_PINDirection)
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	39 87       	std	Y+9, r19	; 0x09
     c78:	28 87       	std	Y+8, r18	; 0x08
     c7a:	88 85       	ldd	r24, Y+8	; 0x08
     c7c:	99 85       	ldd	r25, Y+9	; 0x09
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	31 f0       	breq	.+12     	; 0xc8e <MDIO_voidSetPinDirection+0x104>
     c82:	28 85       	ldd	r18, Y+8	; 0x08
     c84:	39 85       	ldd	r19, Y+9	; 0x09
     c86:	21 30       	cpi	r18, 0x01	; 1
     c88:	31 05       	cpc	r19, r1
     c8a:	b1 f0       	breq	.+44     	; 0xcb8 <MDIO_voidSetPinDirection+0x12e>
     c8c:	98 c0       	rjmp	.+304    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRB_REG,A_PINID);
     c8e:	a7 e3       	ldi	r26, 0x37	; 55
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e7 e3       	ldi	r30, 0x37	; 55
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <MDIO_voidSetPinDirection+0x122>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <MDIO_voidSetPinDirection+0x11e>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	83 c0       	rjmp	.+262    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRB_REG,A_PINID);
     cb8:	a7 e3       	ldi	r26, 0x37	; 55
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e3       	ldi	r30, 0x37	; 55
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <MDIO_voidSetPinDirection+0x14c>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <MDIO_voidSetPinDirection+0x148>
     cda:	84 2b       	or	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	6f c0       	rjmp	.+222    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTC:
			switch (A_PINDirection)
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	3f 83       	std	Y+7, r19	; 0x07
     ce8:	2e 83       	std	Y+6, r18	; 0x06
     cea:	8e 81       	ldd	r24, Y+6	; 0x06
     cec:	9f 81       	ldd	r25, Y+7	; 0x07
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	31 f0       	breq	.+12     	; 0xcfe <MDIO_voidSetPinDirection+0x174>
     cf2:	2e 81       	ldd	r18, Y+6	; 0x06
     cf4:	3f 81       	ldd	r19, Y+7	; 0x07
     cf6:	21 30       	cpi	r18, 0x01	; 1
     cf8:	31 05       	cpc	r19, r1
     cfa:	b1 f0       	breq	.+44     	; 0xd28 <MDIO_voidSetPinDirection+0x19e>
     cfc:	60 c0       	rjmp	.+192    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRC_REG,A_PINID);
     cfe:	a4 e3       	ldi	r26, 0x34	; 52
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e4 e3       	ldi	r30, 0x34	; 52
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <MDIO_voidSetPinDirection+0x192>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <MDIO_voidSetPinDirection+0x18e>
     d20:	80 95       	com	r24
     d22:	84 23       	and	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	4b c0       	rjmp	.+150    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRC_REG,A_PINID);
     d28:	a4 e3       	ldi	r26, 0x34	; 52
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e4 e3       	ldi	r30, 0x34	; 52
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <MDIO_voidSetPinDirection+0x1bc>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <MDIO_voidSetPinDirection+0x1b8>
     d4a:	84 2b       	or	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	37 c0       	rjmp	.+110    	; 0xdbe <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTD:
			switch (A_PINDirection)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	3d 83       	std	Y+5, r19	; 0x05
     d58:	2c 83       	std	Y+4, r18	; 0x04
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	31 f0       	breq	.+12     	; 0xd6e <MDIO_voidSetPinDirection+0x1e4>
     d62:	2c 81       	ldd	r18, Y+4	; 0x04
     d64:	3d 81       	ldd	r19, Y+5	; 0x05
     d66:	21 30       	cpi	r18, 0x01	; 1
     d68:	31 05       	cpc	r19, r1
     d6a:	b1 f0       	breq	.+44     	; 0xd98 <MDIO_voidSetPinDirection+0x20e>
     d6c:	28 c0       	rjmp	.+80     	; 0xdbe <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRD_REG,A_PINID);
     d6e:	a1 e3       	ldi	r26, 0x31	; 49
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e1 e3       	ldi	r30, 0x31	; 49
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <MDIO_voidSetPinDirection+0x202>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <MDIO_voidSetPinDirection+0x1fe>
     d90:	80 95       	com	r24
     d92:	84 23       	and	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	13 c0       	rjmp	.+38     	; 0xdbe <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRD_REG,A_PINID);
     d98:	a1 e3       	ldi	r26, 0x31	; 49
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e1 e3       	ldi	r30, 0x31	; 49
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <MDIO_voidSetPinDirection+0x22c>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <MDIO_voidSetPinDirection+0x228>
     dba:	84 2b       	or	r24, r20
     dbc:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
     dbe:	2d 96       	adiw	r28, 0x0d	; 13
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID, DIO_VALUE_e A_PINValue)
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	2d 97       	sbiw	r28, 0x0d	; 13
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	89 83       	std	Y+1, r24	; 0x01
     de6:	6a 83       	std	Y+2, r22	; 0x02
     de8:	4b 83       	std	Y+3, r20	; 0x03
	// Input Validation
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7) && (A_PINValue <= DIO_SET))
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	84 30       	cpi	r24, 0x04	; 4
     dee:	08 f0       	brcs	.+2      	; 0xdf2 <MDIO_voidSetPinValue+0x22>
     df0:	09 c1       	rjmp	.+530    	; 0x1004 <MDIO_voidSetPinValue+0x234>
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	88 30       	cpi	r24, 0x08	; 8
     df6:	08 f0       	brcs	.+2      	; 0xdfa <MDIO_voidSetPinValue+0x2a>
     df8:	05 c1       	rjmp	.+522    	; 0x1004 <MDIO_voidSetPinValue+0x234>
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <MDIO_voidSetPinValue+0x32>
     e00:	01 c1       	rjmp	.+514    	; 0x1004 <MDIO_voidSetPinValue+0x234>
	{
		switch (A_DIOPort)
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	3d 87       	std	Y+13, r19	; 0x0d
     e0a:	2c 87       	std	Y+12, r18	; 0x0c
     e0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e0e:	9d 85       	ldd	r25, Y+13	; 0x0d
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	91 05       	cpc	r25, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <MDIO_voidSetPinValue+0x48>
     e16:	4f c0       	rjmp	.+158    	; 0xeb6 <MDIO_voidSetPinValue+0xe6>
     e18:	2c 85       	ldd	r18, Y+12	; 0x0c
     e1a:	3d 85       	ldd	r19, Y+13	; 0x0d
     e1c:	22 30       	cpi	r18, 0x02	; 2
     e1e:	31 05       	cpc	r19, r1
     e20:	2c f4       	brge	.+10     	; 0xe2c <MDIO_voidSetPinValue+0x5c>
     e22:	8c 85       	ldd	r24, Y+12	; 0x0c
     e24:	9d 85       	ldd	r25, Y+13	; 0x0d
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	71 f0       	breq	.+28     	; 0xe46 <MDIO_voidSetPinValue+0x76>
     e2a:	ec c0       	rjmp	.+472    	; 0x1004 <MDIO_voidSetPinValue+0x234>
     e2c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e2e:	3d 85       	ldd	r19, Y+13	; 0x0d
     e30:	22 30       	cpi	r18, 0x02	; 2
     e32:	31 05       	cpc	r19, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <MDIO_voidSetPinValue+0x68>
     e36:	77 c0       	rjmp	.+238    	; 0xf26 <MDIO_voidSetPinValue+0x156>
     e38:	8c 85       	ldd	r24, Y+12	; 0x0c
     e3a:	9d 85       	ldd	r25, Y+13	; 0x0d
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	91 05       	cpc	r25, r1
     e40:	09 f4       	brne	.+2      	; 0xe44 <MDIO_voidSetPinValue+0x74>
     e42:	a9 c0       	rjmp	.+338    	; 0xf96 <MDIO_voidSetPinValue+0x1c6>
     e44:	df c0       	rjmp	.+446    	; 0x1004 <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch (A_PINValue)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	3b 87       	std	Y+11, r19	; 0x0b
     e4e:	2a 87       	std	Y+10, r18	; 0x0a
     e50:	8a 85       	ldd	r24, Y+10	; 0x0a
     e52:	9b 85       	ldd	r25, Y+11	; 0x0b
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	31 f0       	breq	.+12     	; 0xe64 <MDIO_voidSetPinValue+0x94>
     e58:	2a 85       	ldd	r18, Y+10	; 0x0a
     e5a:	3b 85       	ldd	r19, Y+11	; 0x0b
     e5c:	21 30       	cpi	r18, 0x01	; 1
     e5e:	31 05       	cpc	r19, r1
     e60:	b1 f0       	breq	.+44     	; 0xe8e <MDIO_voidSetPinValue+0xbe>
     e62:	d0 c0       	rjmp	.+416    	; 0x1004 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_PINID);
     e64:	ab e3       	ldi	r26, 0x3B	; 59
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	eb e3       	ldi	r30, 0x3B	; 59
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <MDIO_voidSetPinValue+0xb2>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <MDIO_voidSetPinValue+0xae>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	bb c0       	rjmp	.+374    	; 0x1004 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_PINID);
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <MDIO_voidSetPinValue+0xdc>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <MDIO_voidSetPinValue+0xd8>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	a7 c0       	rjmp	.+334    	; 0x1004 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTB:
			switch (A_PINValue)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	39 87       	std	Y+9, r19	; 0x09
     ebe:	28 87       	std	Y+8, r18	; 0x08
     ec0:	88 85       	ldd	r24, Y+8	; 0x08
     ec2:	99 85       	ldd	r25, Y+9	; 0x09
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	31 f0       	breq	.+12     	; 0xed4 <MDIO_voidSetPinValue+0x104>
     ec8:	28 85       	ldd	r18, Y+8	; 0x08
     eca:	39 85       	ldd	r19, Y+9	; 0x09
     ecc:	21 30       	cpi	r18, 0x01	; 1
     ece:	31 05       	cpc	r19, r1
     ed0:	b1 f0       	breq	.+44     	; 0xefe <MDIO_voidSetPinValue+0x12e>
     ed2:	98 c0       	rjmp	.+304    	; 0x1004 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTB_REG,A_PINID);
     ed4:	a8 e3       	ldi	r26, 0x38	; 56
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e8 e3       	ldi	r30, 0x38	; 56
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <MDIO_voidSetPinValue+0x122>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <MDIO_voidSetPinValue+0x11e>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	83 c0       	rjmp	.+262    	; 0x1004 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTB_REG,A_PINID);
     efe:	a8 e3       	ldi	r26, 0x38	; 56
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e8 e3       	ldi	r30, 0x38	; 56
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <MDIO_voidSetPinValue+0x14c>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <MDIO_voidSetPinValue+0x148>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	6f c0       	rjmp	.+222    	; 0x1004 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTC:
			switch (A_PINValue)
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3f 83       	std	Y+7, r19	; 0x07
     f2e:	2e 83       	std	Y+6, r18	; 0x06
     f30:	8e 81       	ldd	r24, Y+6	; 0x06
     f32:	9f 81       	ldd	r25, Y+7	; 0x07
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	31 f0       	breq	.+12     	; 0xf44 <MDIO_voidSetPinValue+0x174>
     f38:	2e 81       	ldd	r18, Y+6	; 0x06
     f3a:	3f 81       	ldd	r19, Y+7	; 0x07
     f3c:	21 30       	cpi	r18, 0x01	; 1
     f3e:	31 05       	cpc	r19, r1
     f40:	b1 f0       	breq	.+44     	; 0xf6e <MDIO_voidSetPinValue+0x19e>
     f42:	60 c0       	rjmp	.+192    	; 0x1004 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTC_REG,A_PINID);
     f44:	a5 e3       	ldi	r26, 0x35	; 53
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e5 e3       	ldi	r30, 0x35	; 53
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <MDIO_voidSetPinValue+0x192>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <MDIO_voidSetPinValue+0x18e>
     f66:	80 95       	com	r24
     f68:	84 23       	and	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	4b c0       	rjmp	.+150    	; 0x1004 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTC_REG,A_PINID);
     f6e:	a5 e3       	ldi	r26, 0x35	; 53
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e5 e3       	ldi	r30, 0x35	; 53
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <MDIO_voidSetPinValue+0x1bc>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <MDIO_voidSetPinValue+0x1b8>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	37 c0       	rjmp	.+110    	; 0x1004 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			// *******************************************
		case DIO_PORTD:
			switch (A_PINValue)
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3d 83       	std	Y+5, r19	; 0x05
     f9e:	2c 83       	std	Y+4, r18	; 0x04
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	31 f0       	breq	.+12     	; 0xfb4 <MDIO_voidSetPinValue+0x1e4>
     fa8:	2c 81       	ldd	r18, Y+4	; 0x04
     faa:	3d 81       	ldd	r19, Y+5	; 0x05
     fac:	21 30       	cpi	r18, 0x01	; 1
     fae:	31 05       	cpc	r19, r1
     fb0:	b1 f0       	breq	.+44     	; 0xfde <MDIO_voidSetPinValue+0x20e>
     fb2:	28 c0       	rjmp	.+80     	; 0x1004 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTD_REG,A_PINID);
     fb4:	a2 e3       	ldi	r26, 0x32	; 50
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e2 e3       	ldi	r30, 0x32	; 50
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <MDIO_voidSetPinValue+0x202>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <MDIO_voidSetPinValue+0x1fe>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	13 c0       	rjmp	.+38     	; 0x1004 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTD_REG,A_PINID);
     fde:	a2 e3       	ldi	r26, 0x32	; 50
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e2 e3       	ldi	r30, 0x32	; 50
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <MDIO_voidSetPinValue+0x22c>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <MDIO_voidSetPinValue+0x228>
    1000:	84 2b       	or	r24, r20
    1002:	8c 93       	st	X, r24
	}
	else
	{
		// Do Nothing
	}
}
    1004:	2d 96       	adiw	r28, 0x0d	; 13
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <MDIO_GetPinValue>:


DIO_VALUE_e MDIO_GetPinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <MDIO_GetPinValue+0x6>
    101c:	00 d0       	rcall	.+0      	; 0x101e <MDIO_GetPinValue+0x8>
    101e:	0f 92       	push	r0
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	8a 83       	std	Y+2, r24	; 0x02
    1026:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PINValue;
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7))
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	08 f0       	brcs	.+2      	; 0x1030 <MDIO_GetPinValue+0x1a>
    102e:	6b c0       	rjmp	.+214    	; 0x1106 <MDIO_GetPinValue+0xf0>
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	08 f0       	brcs	.+2      	; 0x1038 <MDIO_GetPinValue+0x22>
    1036:	67 c0       	rjmp	.+206    	; 0x1106 <MDIO_GetPinValue+0xf0>
	{
		switch (A_DIOPort)
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	3d 83       	std	Y+5, r19	; 0x05
    1040:	2c 83       	std	Y+4, r18	; 0x04
    1042:	4c 81       	ldd	r20, Y+4	; 0x04
    1044:	5d 81       	ldd	r21, Y+5	; 0x05
    1046:	41 30       	cpi	r20, 0x01	; 1
    1048:	51 05       	cpc	r21, r1
    104a:	41 f1       	breq	.+80     	; 0x109c <MDIO_GetPinValue+0x86>
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	9d 81       	ldd	r25, Y+5	; 0x05
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	91 05       	cpc	r25, r1
    1054:	34 f4       	brge	.+12     	; 0x1062 <MDIO_GetPinValue+0x4c>
    1056:	2c 81       	ldd	r18, Y+4	; 0x04
    1058:	3d 81       	ldd	r19, Y+5	; 0x05
    105a:	21 15       	cp	r18, r1
    105c:	31 05       	cpc	r19, r1
    105e:	61 f0       	breq	.+24     	; 0x1078 <MDIO_GetPinValue+0x62>
    1060:	52 c0       	rjmp	.+164    	; 0x1106 <MDIO_GetPinValue+0xf0>
    1062:	4c 81       	ldd	r20, Y+4	; 0x04
    1064:	5d 81       	ldd	r21, Y+5	; 0x05
    1066:	42 30       	cpi	r20, 0x02	; 2
    1068:	51 05       	cpc	r21, r1
    106a:	51 f1       	breq	.+84     	; 0x10c0 <MDIO_GetPinValue+0xaa>
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	91 05       	cpc	r25, r1
    1074:	b9 f1       	breq	.+110    	; 0x10e4 <MDIO_GetPinValue+0xce>
    1076:	47 c0       	rjmp	.+142    	; 0x1106 <MDIO_GetPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PINValue = GET_BIT(PINA_REG,A_PINID);
    1078:	e9 e3       	ldi	r30, 0x39	; 57
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a9 01       	movw	r20, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <MDIO_GetPinValue+0x7a>
    108c:	55 95       	asr	r21
    108e:	47 95       	ror	r20
    1090:	8a 95       	dec	r24
    1092:	e2 f7       	brpl	.-8      	; 0x108c <MDIO_GetPinValue+0x76>
    1094:	ca 01       	movw	r24, r20
    1096:	81 70       	andi	r24, 0x01	; 1
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	35 c0       	rjmp	.+106    	; 0x1106 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PINValue = GET_BIT(PINB_REG,A_PINID);
    109c:	e6 e3       	ldi	r30, 0x36	; 54
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a9 01       	movw	r20, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <MDIO_GetPinValue+0x9e>
    10b0:	55 95       	asr	r21
    10b2:	47 95       	ror	r20
    10b4:	8a 95       	dec	r24
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <MDIO_GetPinValue+0x9a>
    10b8:	ca 01       	movw	r24, r20
    10ba:	81 70       	andi	r24, 0x01	; 1
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	23 c0       	rjmp	.+70     	; 0x1106 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PINValue = GET_BIT(PINC_REG,A_PINID);
    10c0:	e3 e3       	ldi	r30, 0x33	; 51
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a9 01       	movw	r20, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <MDIO_GetPinValue+0xc2>
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <MDIO_GetPinValue+0xbe>
    10dc:	ca 01       	movw	r24, r20
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	11 c0       	rjmp	.+34     	; 0x1106 <MDIO_GetPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PINValue = GET_BIT(PIND_REG,A_PINID);
    10e4:	e0 e3       	ldi	r30, 0x30	; 48
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	a9 01       	movw	r20, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <MDIO_GetPinValue+0xe6>
    10f8:	55 95       	asr	r21
    10fa:	47 95       	ror	r20
    10fc:	8a 95       	dec	r24
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <MDIO_GetPinValue+0xe2>
    1100:	ca 01       	movw	r24, r20
    1102:	81 70       	andi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
		}
	}
	return local_PINValue;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <MDIO_voidTogglePinValue+0x6>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <MDIO_voidTogglePinValue+0x8>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD) && (A_PINID <= PIN7))
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	08 f0       	brcs	.+2      	; 0x1130 <MDIO_voidTogglePinValue+0x18>
    112e:	72 c0       	rjmp	.+228    	; 0x1214 <MDIO_voidTogglePinValue+0xfc>
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	88 30       	cpi	r24, 0x08	; 8
    1134:	08 f0       	brcs	.+2      	; 0x1138 <MDIO_voidTogglePinValue+0x20>
    1136:	6e c0       	rjmp	.+220    	; 0x1214 <MDIO_voidTogglePinValue+0xfc>
	{
		switch (A_DIOPort)
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	3c 83       	std	Y+4, r19	; 0x04
    1140:	2b 83       	std	Y+3, r18	; 0x03
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	91 05       	cpc	r25, r1
    114a:	49 f1       	breq	.+82     	; 0x119e <MDIO_voidTogglePinValue+0x86>
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	22 30       	cpi	r18, 0x02	; 2
    1152:	31 05       	cpc	r19, r1
    1154:	2c f4       	brge	.+10     	; 0x1160 <MDIO_voidTogglePinValue+0x48>
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	61 f0       	breq	.+24     	; 0x1176 <MDIO_voidTogglePinValue+0x5e>
    115e:	5a c0       	rjmp	.+180    	; 0x1214 <MDIO_voidTogglePinValue+0xfc>
    1160:	2b 81       	ldd	r18, Y+3	; 0x03
    1162:	3c 81       	ldd	r19, Y+4	; 0x04
    1164:	22 30       	cpi	r18, 0x02	; 2
    1166:	31 05       	cpc	r19, r1
    1168:	71 f1       	breq	.+92     	; 0x11c6 <MDIO_voidTogglePinValue+0xae>
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	83 30       	cpi	r24, 0x03	; 3
    1170:	91 05       	cpc	r25, r1
    1172:	e9 f1       	breq	.+122    	; 0x11ee <MDIO_voidTogglePinValue+0xd6>
    1174:	4f c0       	rjmp	.+158    	; 0x1214 <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA_REG,A_PINID);
    1176:	ab e3       	ldi	r26, 0x3B	; 59
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	eb e3       	ldi	r30, 0x3B	; 59
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <MDIO_voidTogglePinValue+0x7c>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <MDIO_voidTogglePinValue+0x78>
    1198:	84 27       	eor	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	3b c0       	rjmp	.+118    	; 0x1214 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB_REG,A_PINID);
    119e:	a8 e3       	ldi	r26, 0x38	; 56
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e8 e3       	ldi	r30, 0x38	; 56
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <MDIO_voidTogglePinValue+0xa4>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <MDIO_voidTogglePinValue+0xa0>
    11c0:	84 27       	eor	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	27 c0       	rjmp	.+78     	; 0x1214 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC_REG,A_PINID);
    11c6:	a5 e3       	ldi	r26, 0x35	; 53
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e5 e3       	ldi	r30, 0x35	; 53
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <MDIO_voidTogglePinValue+0xcc>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <MDIO_voidTogglePinValue+0xc8>
    11e8:	84 27       	eor	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	13 c0       	rjmp	.+38     	; 0x1214 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD_REG,A_PINID);
    11ee:	a2 e3       	ldi	r26, 0x32	; 50
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e2 e3       	ldi	r30, 0x32	; 50
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <MDIO_voidTogglePinValue+0xf4>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <MDIO_voidTogglePinValue+0xf0>
    1210:	84 27       	eor	r24, r20
    1212:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection (DIO_PORT_e A_DIOPort, u8 A_u8Direction)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <MDIO_voidSetPortDirection+0x6>
    1228:	00 d0       	rcall	.+0      	; 0x122a <MDIO_voidSetPortDirection+0x8>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD))
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	84 30       	cpi	r24, 0x04	; 4
    1236:	90 f5       	brcc	.+100    	; 0x129c <MDIO_voidSetPortDirection+0x7a>
	{
		switch (A_DIOPort)
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3c 83       	std	Y+4, r19	; 0x04
    1240:	2b 83       	std	Y+3, r18	; 0x03
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	d1 f0       	breq	.+52     	; 0x1280 <MDIO_voidSetPortDirection+0x5e>
    124c:	2b 81       	ldd	r18, Y+3	; 0x03
    124e:	3c 81       	ldd	r19, Y+4	; 0x04
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	2c f4       	brge	.+10     	; 0x1260 <MDIO_voidSetPortDirection+0x3e>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	61 f0       	breq	.+24     	; 0x1276 <MDIO_voidSetPortDirection+0x54>
    125e:	1e c0       	rjmp	.+60     	; 0x129c <MDIO_voidSetPortDirection+0x7a>
    1260:	2b 81       	ldd	r18, Y+3	; 0x03
    1262:	3c 81       	ldd	r19, Y+4	; 0x04
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	81 f0       	breq	.+32     	; 0x128a <MDIO_voidSetPortDirection+0x68>
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	81 f0       	breq	.+32     	; 0x1294 <MDIO_voidSetPortDirection+0x72>
    1274:	13 c0       	rjmp	.+38     	; 0x129c <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8Direction;
    1276:	ea e3       	ldi	r30, 0x3A	; 58
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	80 83       	st	Z, r24
    127e:	0e c0       	rjmp	.+28     	; 0x129c <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8Direction;
    1280:	e7 e3       	ldi	r30, 0x37	; 55
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	80 83       	st	Z, r24
    1288:	09 c0       	rjmp	.+18     	; 0x129c <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8Direction;
    128a:	e4 e3       	ldi	r30, 0x34	; 52
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	80 83       	st	Z, r24
    1292:	04 c0       	rjmp	.+8      	; 0x129c <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8Direction;
    1294:	e1 e3       	ldi	r30, 0x31	; 49
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
	}
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue (DIO_PORT_e A_DIOPort, u8 A_u8Value)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <MDIO_voidSetPortValue+0x6>
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <MDIO_voidSetPortValue+0x8>
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_DIOPort <= DIO_PORTD))
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	90 f5       	brcc	.+100    	; 0x1324 <MDIO_voidSetPortValue+0x7a>
	{
		switch (A_DIOPort)
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	3c 83       	std	Y+4, r19	; 0x04
    12c8:	2b 83       	std	Y+3, r18	; 0x03
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	d1 f0       	breq	.+52     	; 0x1308 <MDIO_voidSetPortValue+0x5e>
    12d4:	2b 81       	ldd	r18, Y+3	; 0x03
    12d6:	3c 81       	ldd	r19, Y+4	; 0x04
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <MDIO_voidSetPortValue+0x3e>
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	61 f0       	breq	.+24     	; 0x12fe <MDIO_voidSetPortValue+0x54>
    12e6:	1e c0       	rjmp	.+60     	; 0x1324 <MDIO_voidSetPortValue+0x7a>
    12e8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ea:	3c 81       	ldd	r19, Y+4	; 0x04
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	81 f0       	breq	.+32     	; 0x1312 <MDIO_voidSetPortValue+0x68>
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	91 05       	cpc	r25, r1
    12fa:	81 f0       	breq	.+32     	; 0x131c <MDIO_voidSetPortValue+0x72>
    12fc:	13 c0       	rjmp	.+38     	; 0x1324 <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8Value;
    12fe:	eb e3       	ldi	r30, 0x3B	; 59
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	80 83       	st	Z, r24
    1306:	0e c0       	rjmp	.+28     	; 0x1324 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8Value;
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	80 83       	st	Z, r24
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8Value;
    1312:	e5 e3       	ldi	r30, 0x35	; 53
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	80 83       	st	Z, r24
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8Value;
    131c:	e2 e3       	ldi	r30, 0x32	; 50
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
	}
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <MDIO_voidInit>:


void MDIO_voidInit()
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62

	DDRA_REG=CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION
    133a:	ea e3       	ldi	r30, 0x3A	; 58
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	87 e0       	ldi	r24, 0x07	; 7
    1340:	80 83       	st	Z, r24
					 ,PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);

	DDRB_REG=CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION
    1342:	e7 e3       	ldi	r30, 0x37	; 55
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	88 e0       	ldi	r24, 0x08	; 8
    1348:	80 83       	st	Z, r24
					 ,PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);

	DDRC_REG=CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION
    134a:	e4 e3       	ldi	r30, 0x34	; 52
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	80 83       	st	Z, r24
					 ,PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);

	DDRD_REG=CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,PD5_INITIAL_DIRECTION,PD4_INITIAL_DIRECTION
    1352:	e1 e3       	ldi	r30, 0x31	; 49
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8a e3       	ldi	r24, 0x3A	; 58
    1358:	80 83       	st	Z, r24
					 ,PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);


	PORTA_REG=CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,PA5_INITIAL_VALUE,PA4_INITIAL_VALUE
    135a:	eb e3       	ldi	r30, 0x3B	; 59
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	10 82       	st	Z, r1
					 ,PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);

	PORTB_REG=CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,PB5_INITIAL_VALUE,PB4_INITIAL_VALUE
    1360:	e8 e3       	ldi	r30, 0x38	; 56
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	10 82       	st	Z, r1
					 ,PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);

	PORTC_REG=CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,PC5_INITIAL_VALUE,PC4_INITIAL_VALUE
    1366:	e5 e3       	ldi	r30, 0x35	; 53
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	10 82       	st	Z, r1
					 ,PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);

	PORTD_REG=CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,PD5_INITIAL_VALUE,PD4_INITIAL_VALUE
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	10 82       	st	Z, r1
					 ,PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <HLCD_voidSendCommand>:
#include "../Include/HAL/LCD/LCD_Cfg.h"

#define F_CPU 8000000UL

void HLCD_voidSendCommand (u8 A_u8Command)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	2f 97       	sbiw	r28, 0x0f	; 15
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	8f 87       	std	Y+15, r24	; 0x0f
	// To send Command --> (RS-->0) , (RW-->0)
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_RESET);
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	63 e0       	ldi	r22, 0x03	; 3
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_RESET);
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	64 e0       	ldi	r22, 0x04	; 4
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>

	// Send Command
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Command);
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    13a6:	0e 94 55 09 	call	0x12aa	; 0x12aa <MDIO_voidSetPortValue>

	// Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_SET);
    13aa:	83 e0       	ldi	r24, 0x03	; 3
    13ac:	65 e0       	ldi	r22, 0x05	; 5
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a0 e0       	ldi	r26, 0x00	; 0
    13ba:	b0 e4       	ldi	r27, 0x40	; 64
    13bc:	8b 87       	std	Y+11, r24	; 0x0b
    13be:	9c 87       	std	Y+12, r25	; 0x0c
    13c0:	ad 87       	std	Y+13, r26	; 0x0d
    13c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	4a ef       	ldi	r20, 0xFA	; 250
    13d2:	54 e4       	ldi	r21, 0x44	; 68
    13d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	8f 83       	std	Y+7, r24	; 0x07
    13de:	98 87       	std	Y+8, r25	; 0x08
    13e0:	a9 87       	std	Y+9, r26	; 0x09
    13e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e4:	6f 81       	ldd	r22, Y+7	; 0x07
    13e6:	78 85       	ldd	r23, Y+8	; 0x08
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e8       	ldi	r20, 0x80	; 128
    13f2:	5f e3       	ldi	r21, 0x3F	; 63
    13f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13f8:	88 23       	and	r24, r24
    13fa:	2c f4       	brge	.+10     	; 0x1406 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	3f c0       	rjmp	.+126    	; 0x1484 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1406:	6f 81       	ldd	r22, Y+7	; 0x07
    1408:	78 85       	ldd	r23, Y+8	; 0x08
    140a:	89 85       	ldd	r24, Y+9	; 0x09
    140c:	9a 85       	ldd	r25, Y+10	; 0x0a
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	3f ef       	ldi	r19, 0xFF	; 255
    1412:	4f e7       	ldi	r20, 0x7F	; 127
    1414:	57 e4       	ldi	r21, 0x47	; 71
    1416:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141a:	18 16       	cp	r1, r24
    141c:	4c f5       	brge	.+82     	; 0x1470 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1420:	7c 85       	ldd	r23, Y+12	; 0x0c
    1422:	8d 85       	ldd	r24, Y+13	; 0x0d
    1424:	9e 85       	ldd	r25, Y+14	; 0x0e
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e2       	ldi	r20, 0x20	; 32
    142c:	51 e4       	ldi	r21, 0x41	; 65
    142e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	bc 01       	movw	r22, r24
    1438:	cd 01       	movw	r24, r26
    143a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	0f c0       	rjmp	.+30     	; 0x1466 <HLCD_voidSendCommand+0xee>
    1448:	88 ec       	ldi	r24, 0xC8	; 200
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <HLCD_voidSendCommand+0xdc>
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	9e 83       	std	Y+6, r25	; 0x06
    1464:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	69 f7       	brne	.-38     	; 0x1448 <HLCD_voidSendCommand+0xd0>
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1470:	6f 81       	ldd	r22, Y+7	; 0x07
    1472:	78 85       	ldd	r23, Y+8	; 0x08
    1474:	89 85       	ldd	r24, Y+9	; 0x09
    1476:	9a 85       	ldd	r25, Y+10	; 0x0a
    1478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	9e 83       	std	Y+6, r25	; 0x06
    1482:	8d 83       	std	Y+5, r24	; 0x05
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <HLCD_voidSendCommand+0x118>
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_RESET);
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	65 e0       	ldi	r22, 0x05	; 5
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
}
    14a2:	2f 96       	adiw	r28, 0x0f	; 15
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <HLCD_voidSendData>:

void HLCD_voidSendData (u8 A_u8Data)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	2f 97       	sbiw	r28, 0x0f	; 15
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	8f 87       	std	Y+15, r24	; 0x0f
	// To send Data --> (RS-->1) , (RW-->0)
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_SET);
    14ca:	83 e0       	ldi	r24, 0x03	; 3
    14cc:	63 e0       	ldi	r22, 0x03	; 3
    14ce:	41 e0       	ldi	r20, 0x01	; 1
    14d0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_RESET);
    14d4:	83 e0       	ldi	r24, 0x03	; 3
    14d6:	64 e0       	ldi	r22, 0x04	; 4
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>

	// Send Data
	MDIO_voidSetPortValue(LCD_DATA_PORT, A_u8Data);
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    14e2:	0e 94 55 09 	call	0x12aa	; 0x12aa <MDIO_voidSetPortValue>

	// Set Pulse on E Pin
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_SET);
    14e6:	83 e0       	ldi	r24, 0x03	; 3
    14e8:	65 e0       	ldi	r22, 0x05	; 5
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a0 e0       	ldi	r26, 0x00	; 0
    14f6:	b0 e4       	ldi	r27, 0x40	; 64
    14f8:	8b 87       	std	Y+11, r24	; 0x0b
    14fa:	9c 87       	std	Y+12, r25	; 0x0c
    14fc:	ad 87       	std	Y+13, r26	; 0x0d
    14fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1500:	6b 85       	ldd	r22, Y+11	; 0x0b
    1502:	7c 85       	ldd	r23, Y+12	; 0x0c
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	9e 85       	ldd	r25, Y+14	; 0x0e
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	4a ef       	ldi	r20, 0xFA	; 250
    150e:	54 e4       	ldi	r21, 0x44	; 68
    1510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	8f 83       	std	Y+7, r24	; 0x07
    151a:	98 87       	std	Y+8, r25	; 0x08
    151c:	a9 87       	std	Y+9, r26	; 0x09
    151e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1520:	6f 81       	ldd	r22, Y+7	; 0x07
    1522:	78 85       	ldd	r23, Y+8	; 0x08
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	5f e3       	ldi	r21, 0x3F	; 63
    1530:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1534:	88 23       	and	r24, r24
    1536:	2c f4       	brge	.+10     	; 0x1542 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	3f c0       	rjmp	.+126    	; 0x15c0 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1542:	6f 81       	ldd	r22, Y+7	; 0x07
    1544:	78 85       	ldd	r23, Y+8	; 0x08
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	9a 85       	ldd	r25, Y+10	; 0x0a
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	3f ef       	ldi	r19, 0xFF	; 255
    154e:	4f e7       	ldi	r20, 0x7F	; 127
    1550:	57 e4       	ldi	r21, 0x47	; 71
    1552:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1556:	18 16       	cp	r1, r24
    1558:	4c f5       	brge	.+82     	; 0x15ac <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155a:	6b 85       	ldd	r22, Y+11	; 0x0b
    155c:	7c 85       	ldd	r23, Y+12	; 0x0c
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e2       	ldi	r20, 0x20	; 32
    1568:	51 e4       	ldi	r21, 0x41	; 65
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	8d 83       	std	Y+5, r24	; 0x05
    1582:	0f c0       	rjmp	.+30     	; 0x15a2 <HLCD_voidSendData+0xee>
    1584:	88 ec       	ldi	r24, 0xC8	; 200
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	9c 83       	std	Y+4, r25	; 0x04
    158a:	8b 83       	std	Y+3, r24	; 0x03
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <HLCD_voidSendData+0xdc>
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	9e 81       	ldd	r25, Y+6	; 0x06
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	69 f7       	brne	.-38     	; 0x1584 <HLCD_voidSendData+0xd0>
    15aa:	14 c0       	rjmp	.+40     	; 0x15d4 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	9a 83       	std	Y+2, r25	; 0x02
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <HLCD_voidSendData+0x118>
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, DIO_RESET);
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	65 e0       	ldi	r22, 0x05	; 5
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
}
    15de:	2f 96       	adiw	r28, 0x0f	; 15
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <HLCD_voidInit>:


void HLCD_voidInit(void)
{
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	c6 54       	subi	r28, 0x46	; 70
    15fe:	d0 40       	sbci	r29, 0x00	; 0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	fe 01       	movw	r30, r28
    160c:	ed 5b       	subi	r30, 0xBD	; 189
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a0 ef       	ldi	r26, 0xF0	; 240
    1616:	b1 e4       	ldi	r27, 0x41	; 65
    1618:	80 83       	st	Z, r24
    161a:	91 83       	std	Z+1, r25	; 0x01
    161c:	a2 83       	std	Z+2, r26	; 0x02
    161e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1620:	8e 01       	movw	r16, r28
    1622:	01 5c       	subi	r16, 0xC1	; 193
    1624:	1f 4f       	sbci	r17, 0xFF	; 255
    1626:	fe 01       	movw	r30, r28
    1628:	ed 5b       	subi	r30, 0xBD	; 189
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4a ef       	ldi	r20, 0xFA	; 250
    163a:	54 e4       	ldi	r21, 0x44	; 68
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	f8 01       	movw	r30, r16
    1646:	80 83       	st	Z, r24
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	a2 83       	std	Z+2, r26	; 0x02
    164c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    164e:	fe 01       	movw	r30, r28
    1650:	ff 96       	adiw	r30, 0x3f	; 63
    1652:	60 81       	ld	r22, Z
    1654:	71 81       	ldd	r23, Z+1	; 0x01
    1656:	82 81       	ldd	r24, Z+2	; 0x02
    1658:	93 81       	ldd	r25, Z+3	; 0x03
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e8       	ldi	r20, 0x80	; 128
    1660:	5f e3       	ldi	r21, 0x3F	; 63
    1662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1666:	88 23       	and	r24, r24
    1668:	2c f4       	brge	.+10     	; 0x1674 <HLCD_voidInit+0x84>
		__ticks = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	9e af       	std	Y+62, r25	; 0x3e
    1670:	8d af       	std	Y+61, r24	; 0x3d
    1672:	46 c0       	rjmp	.+140    	; 0x1700 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    1674:	fe 01       	movw	r30, r28
    1676:	ff 96       	adiw	r30, 0x3f	; 63
    1678:	60 81       	ld	r22, Z
    167a:	71 81       	ldd	r23, Z+1	; 0x01
    167c:	82 81       	ldd	r24, Z+2	; 0x02
    167e:	93 81       	ldd	r25, Z+3	; 0x03
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	3f ef       	ldi	r19, 0xFF	; 255
    1684:	4f e7       	ldi	r20, 0x7F	; 127
    1686:	57 e4       	ldi	r21, 0x47	; 71
    1688:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    168c:	18 16       	cp	r1, r24
    168e:	64 f5       	brge	.+88     	; 0x16e8 <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1690:	fe 01       	movw	r30, r28
    1692:	ed 5b       	subi	r30, 0xBD	; 189
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	82 81       	ldd	r24, Z+2	; 0x02
    169c:	93 81       	ldd	r25, Z+3	; 0x03
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e2       	ldi	r20, 0x20	; 32
    16a4:	51 e4       	ldi	r21, 0x41	; 65
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9e af       	std	Y+62, r25	; 0x3e
    16bc:	8d af       	std	Y+61, r24	; 0x3d
    16be:	0f c0       	rjmp	.+30     	; 0x16de <HLCD_voidInit+0xee>
    16c0:	88 ec       	ldi	r24, 0xC8	; 200
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9c af       	std	Y+60, r25	; 0x3c
    16c6:	8b af       	std	Y+59, r24	; 0x3b
    16c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    16ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <HLCD_voidInit+0xdc>
    16d0:	9c af       	std	Y+60, r25	; 0x3c
    16d2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    16d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	9e af       	std	Y+62, r25	; 0x3e
    16dc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16de:	8d ad       	ldd	r24, Y+61	; 0x3d
    16e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	69 f7       	brne	.-38     	; 0x16c0 <HLCD_voidInit+0xd0>
    16e6:	16 c0       	rjmp	.+44     	; 0x1714 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e8:	fe 01       	movw	r30, r28
    16ea:	ff 96       	adiw	r30, 0x3f	; 63
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9e af       	std	Y+62, r25	; 0x3e
    16fe:	8d af       	std	Y+61, r24	; 0x3d
    1700:	8d ad       	ldd	r24, Y+61	; 0x3d
    1702:	9e ad       	ldd	r25, Y+62	; 0x3e
    1704:	9a af       	std	Y+58, r25	; 0x3a
    1706:	89 af       	std	Y+57, r24	; 0x39
    1708:	89 ad       	ldd	r24, Y+57	; 0x39
    170a:	9a ad       	ldd	r25, Y+58	; 0x3a
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <HLCD_voidInit+0x11c>
    1710:	9a af       	std	Y+58, r25	; 0x3a
    1712:	89 af       	std	Y+57, r24	; 0x39
	// Wait for more than 30ms after VDD rises to 4.5v
	_delay_ms(30);

	// Function Set Command then wait for more than 39us
	HLCD_voidSendCommand(FUNCTION_SET);
    1714:	88 e3       	ldi	r24, 0x38	; 56
    1716:	0e 94 bc 09 	call	0x1378	; 0x1378 <HLCD_voidSendCommand>
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 e8       	ldi	r26, 0x80	; 128
    1720:	bf e3       	ldi	r27, 0x3F	; 63
    1722:	8d ab       	std	Y+53, r24	; 0x35
    1724:	9e ab       	std	Y+54, r25	; 0x36
    1726:	af ab       	std	Y+55, r26	; 0x37
    1728:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172a:	6d a9       	ldd	r22, Y+53	; 0x35
    172c:	7e a9       	ldd	r23, Y+54	; 0x36
    172e:	8f a9       	ldd	r24, Y+55	; 0x37
    1730:	98 ad       	ldd	r25, Y+56	; 0x38
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	4a ef       	ldi	r20, 0xFA	; 250
    1738:	54 e4       	ldi	r21, 0x44	; 68
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	89 ab       	std	Y+49, r24	; 0x31
    1744:	9a ab       	std	Y+50, r25	; 0x32
    1746:	ab ab       	std	Y+51, r26	; 0x33
    1748:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    174a:	69 a9       	ldd	r22, Y+49	; 0x31
    174c:	7a a9       	ldd	r23, Y+50	; 0x32
    174e:	8b a9       	ldd	r24, Y+51	; 0x33
    1750:	9c a9       	ldd	r25, Y+52	; 0x34
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e8       	ldi	r20, 0x80	; 128
    1758:	5f e3       	ldi	r21, 0x3F	; 63
    175a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    175e:	88 23       	and	r24, r24
    1760:	2c f4       	brge	.+10     	; 0x176c <HLCD_voidInit+0x17c>
		__ticks = 1;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	98 ab       	std	Y+48, r25	; 0x30
    1768:	8f a7       	std	Y+47, r24	; 0x2f
    176a:	3f c0       	rjmp	.+126    	; 0x17ea <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    176c:	69 a9       	ldd	r22, Y+49	; 0x31
    176e:	7a a9       	ldd	r23, Y+50	; 0x32
    1770:	8b a9       	ldd	r24, Y+51	; 0x33
    1772:	9c a9       	ldd	r25, Y+52	; 0x34
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	3f ef       	ldi	r19, 0xFF	; 255
    1778:	4f e7       	ldi	r20, 0x7F	; 127
    177a:	57 e4       	ldi	r21, 0x47	; 71
    177c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1780:	18 16       	cp	r1, r24
    1782:	4c f5       	brge	.+82     	; 0x17d6 <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1784:	6d a9       	ldd	r22, Y+53	; 0x35
    1786:	7e a9       	ldd	r23, Y+54	; 0x36
    1788:	8f a9       	ldd	r24, Y+55	; 0x37
    178a:	98 ad       	ldd	r25, Y+56	; 0x38
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e2       	ldi	r20, 0x20	; 32
    1792:	51 e4       	ldi	r21, 0x41	; 65
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	98 ab       	std	Y+48, r25	; 0x30
    17aa:	8f a7       	std	Y+47, r24	; 0x2f
    17ac:	0f c0       	rjmp	.+30     	; 0x17cc <HLCD_voidInit+0x1dc>
    17ae:	88 ec       	ldi	r24, 0xC8	; 200
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9e a7       	std	Y+46, r25	; 0x2e
    17b4:	8d a7       	std	Y+45, r24	; 0x2d
    17b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    17b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <HLCD_voidInit+0x1ca>
    17be:	9e a7       	std	Y+46, r25	; 0x2e
    17c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c4:	98 a9       	ldd	r25, Y+48	; 0x30
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	98 ab       	std	Y+48, r25	; 0x30
    17ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ce:	98 a9       	ldd	r25, Y+48	; 0x30
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	69 f7       	brne	.-38     	; 0x17ae <HLCD_voidInit+0x1be>
    17d4:	14 c0       	rjmp	.+40     	; 0x17fe <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d6:	69 a9       	ldd	r22, Y+49	; 0x31
    17d8:	7a a9       	ldd	r23, Y+50	; 0x32
    17da:	8b a9       	ldd	r24, Y+51	; 0x33
    17dc:	9c a9       	ldd	r25, Y+52	; 0x34
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	98 ab       	std	Y+48, r25	; 0x30
    17e8:	8f a7       	std	Y+47, r24	; 0x2f
    17ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ec:	98 a9       	ldd	r25, Y+48	; 0x30
    17ee:	9c a7       	std	Y+44, r25	; 0x2c
    17f0:	8b a7       	std	Y+43, r24	; 0x2b
    17f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <HLCD_voidInit+0x206>
    17fa:	9c a7       	std	Y+44, r25	; 0x2c
    17fc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Display ON/OFF Control Command then wait for more than 39us
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    17fe:	8f e0       	ldi	r24, 0x0F	; 15
    1800:	0e 94 bc 09 	call	0x1378	; 0x1378 <HLCD_voidSendCommand>
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 e8       	ldi	r26, 0x80	; 128
    180a:	bf e3       	ldi	r27, 0x3F	; 63
    180c:	8f a3       	std	Y+39, r24	; 0x27
    180e:	98 a7       	std	Y+40, r25	; 0x28
    1810:	a9 a7       	std	Y+41, r26	; 0x29
    1812:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1814:	6f a1       	ldd	r22, Y+39	; 0x27
    1816:	78 a5       	ldd	r23, Y+40	; 0x28
    1818:	89 a5       	ldd	r24, Y+41	; 0x29
    181a:	9a a5       	ldd	r25, Y+42	; 0x2a
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a ef       	ldi	r20, 0xFA	; 250
    1822:	54 e4       	ldi	r21, 0x44	; 68
    1824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	8b a3       	std	Y+35, r24	; 0x23
    182e:	9c a3       	std	Y+36, r25	; 0x24
    1830:	ad a3       	std	Y+37, r26	; 0x25
    1832:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1834:	6b a1       	ldd	r22, Y+35	; 0x23
    1836:	7c a1       	ldd	r23, Y+36	; 0x24
    1838:	8d a1       	ldd	r24, Y+37	; 0x25
    183a:	9e a1       	ldd	r25, Y+38	; 0x26
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e8       	ldi	r20, 0x80	; 128
    1842:	5f e3       	ldi	r21, 0x3F	; 63
    1844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1848:	88 23       	and	r24, r24
    184a:	2c f4       	brge	.+10     	; 0x1856 <HLCD_voidInit+0x266>
		__ticks = 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9a a3       	std	Y+34, r25	; 0x22
    1852:	89 a3       	std	Y+33, r24	; 0x21
    1854:	3f c0       	rjmp	.+126    	; 0x18d4 <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1856:	6b a1       	ldd	r22, Y+35	; 0x23
    1858:	7c a1       	ldd	r23, Y+36	; 0x24
    185a:	8d a1       	ldd	r24, Y+37	; 0x25
    185c:	9e a1       	ldd	r25, Y+38	; 0x26
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	3f ef       	ldi	r19, 0xFF	; 255
    1862:	4f e7       	ldi	r20, 0x7F	; 127
    1864:	57 e4       	ldi	r21, 0x47	; 71
    1866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186a:	18 16       	cp	r1, r24
    186c:	4c f5       	brge	.+82     	; 0x18c0 <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186e:	6f a1       	ldd	r22, Y+39	; 0x27
    1870:	78 a5       	ldd	r23, Y+40	; 0x28
    1872:	89 a5       	ldd	r24, Y+41	; 0x29
    1874:	9a a5       	ldd	r25, Y+42	; 0x2a
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e2       	ldi	r20, 0x20	; 32
    187c:	51 e4       	ldi	r21, 0x41	; 65
    187e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	9a a3       	std	Y+34, r25	; 0x22
    1894:	89 a3       	std	Y+33, r24	; 0x21
    1896:	0f c0       	rjmp	.+30     	; 0x18b6 <HLCD_voidInit+0x2c6>
    1898:	88 ec       	ldi	r24, 0xC8	; 200
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	98 a3       	std	Y+32, r25	; 0x20
    189e:	8f 8f       	std	Y+31, r24	; 0x1f
    18a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18a2:	98 a1       	ldd	r25, Y+32	; 0x20
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <HLCD_voidInit+0x2b4>
    18a8:	98 a3       	std	Y+32, r25	; 0x20
    18aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ac:	89 a1       	ldd	r24, Y+33	; 0x21
    18ae:	9a a1       	ldd	r25, Y+34	; 0x22
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	9a a3       	std	Y+34, r25	; 0x22
    18b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b6:	89 a1       	ldd	r24, Y+33	; 0x21
    18b8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	69 f7       	brne	.-38     	; 0x1898 <HLCD_voidInit+0x2a8>
    18be:	14 c0       	rjmp	.+40     	; 0x18e8 <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c0:	6b a1       	ldd	r22, Y+35	; 0x23
    18c2:	7c a1       	ldd	r23, Y+36	; 0x24
    18c4:	8d a1       	ldd	r24, Y+37	; 0x25
    18c6:	9e a1       	ldd	r25, Y+38	; 0x26
    18c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	9a a3       	std	Y+34, r25	; 0x22
    18d2:	89 a3       	std	Y+33, r24	; 0x21
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	9e 8f       	std	Y+30, r25	; 0x1e
    18da:	8d 8f       	std	Y+29, r24	; 0x1d
    18dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <HLCD_voidInit+0x2f0>
    18e4:	9e 8f       	std	Y+30, r25	; 0x1e
    18e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Display Clear Command then wait for more than 1.53ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	0e 94 bc 09 	call	0x1378	; 0x1378 <HLCD_voidSendCommand>
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a0 e0       	ldi	r26, 0x00	; 0
    18f4:	b0 e4       	ldi	r27, 0x40	; 64
    18f6:	89 8f       	std	Y+25, r24	; 0x19
    18f8:	9a 8f       	std	Y+26, r25	; 0x1a
    18fa:	ab 8f       	std	Y+27, r26	; 0x1b
    18fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1900:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1902:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1904:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	4a ef       	ldi	r20, 0xFA	; 250
    190c:	54 e4       	ldi	r21, 0x44	; 68
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	8d 8b       	std	Y+21, r24	; 0x15
    1918:	9e 8b       	std	Y+22, r25	; 0x16
    191a:	af 8b       	std	Y+23, r26	; 0x17
    191c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    191e:	6d 89       	ldd	r22, Y+21	; 0x15
    1920:	7e 89       	ldd	r23, Y+22	; 0x16
    1922:	8f 89       	ldd	r24, Y+23	; 0x17
    1924:	98 8d       	ldd	r25, Y+24	; 0x18
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e8       	ldi	r20, 0x80	; 128
    192c:	5f e3       	ldi	r21, 0x3F	; 63
    192e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1932:	88 23       	and	r24, r24
    1934:	2c f4       	brge	.+10     	; 0x1940 <HLCD_voidInit+0x350>
		__ticks = 1;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9c 8b       	std	Y+20, r25	; 0x14
    193c:	8b 8b       	std	Y+19, r24	; 0x13
    193e:	3f c0       	rjmp	.+126    	; 0x19be <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1940:	6d 89       	ldd	r22, Y+21	; 0x15
    1942:	7e 89       	ldd	r23, Y+22	; 0x16
    1944:	8f 89       	ldd	r24, Y+23	; 0x17
    1946:	98 8d       	ldd	r25, Y+24	; 0x18
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	3f ef       	ldi	r19, 0xFF	; 255
    194c:	4f e7       	ldi	r20, 0x7F	; 127
    194e:	57 e4       	ldi	r21, 0x47	; 71
    1950:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1954:	18 16       	cp	r1, r24
    1956:	4c f5       	brge	.+82     	; 0x19aa <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1958:	69 8d       	ldd	r22, Y+25	; 0x19
    195a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    195c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    195e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e2       	ldi	r20, 0x20	; 32
    1966:	51 e4       	ldi	r21, 0x41	; 65
    1968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	9c 8b       	std	Y+20, r25	; 0x14
    197e:	8b 8b       	std	Y+19, r24	; 0x13
    1980:	0f c0       	rjmp	.+30     	; 0x19a0 <HLCD_voidInit+0x3b0>
    1982:	88 ec       	ldi	r24, 0xC8	; 200
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9a 8b       	std	Y+18, r25	; 0x12
    1988:	89 8b       	std	Y+17, r24	; 0x11
    198a:	89 89       	ldd	r24, Y+17	; 0x11
    198c:	9a 89       	ldd	r25, Y+18	; 0x12
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	f1 f7       	brne	.-4      	; 0x198e <HLCD_voidInit+0x39e>
    1992:	9a 8b       	std	Y+18, r25	; 0x12
    1994:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1996:	8b 89       	ldd	r24, Y+19	; 0x13
    1998:	9c 89       	ldd	r25, Y+20	; 0x14
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	9c 8b       	std	Y+20, r25	; 0x14
    199e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	9c 89       	ldd	r25, Y+20	; 0x14
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	69 f7       	brne	.-38     	; 0x1982 <HLCD_voidInit+0x392>
    19a8:	14 c0       	rjmp	.+40     	; 0x19d2 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19aa:	6d 89       	ldd	r22, Y+21	; 0x15
    19ac:	7e 89       	ldd	r23, Y+22	; 0x16
    19ae:	8f 89       	ldd	r24, Y+23	; 0x17
    19b0:	98 8d       	ldd	r25, Y+24	; 0x18
    19b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	9c 8b       	std	Y+20, r25	; 0x14
    19bc:	8b 8b       	std	Y+19, r24	; 0x13
    19be:	8b 89       	ldd	r24, Y+19	; 0x13
    19c0:	9c 89       	ldd	r25, Y+20	; 0x14
    19c2:	98 8b       	std	Y+16, r25	; 0x10
    19c4:	8f 87       	std	Y+15, r24	; 0x0f
    19c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c8:	98 89       	ldd	r25, Y+16	; 0x10
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <HLCD_voidInit+0x3da>
    19ce:	98 8b       	std	Y+16, r25	; 0x10
    19d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	// Entry Mode Set Command then wait for more than 39us
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    19d2:	86 e0       	ldi	r24, 0x06	; 6
    19d4:	0e 94 bc 09 	call	0x1378	; 0x1378 <HLCD_voidSendCommand>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	a0 e8       	ldi	r26, 0x80	; 128
    19de:	bf e3       	ldi	r27, 0x3F	; 63
    19e0:	8b 87       	std	Y+11, r24	; 0x0b
    19e2:	9c 87       	std	Y+12, r25	; 0x0c
    19e4:	ad 87       	std	Y+13, r26	; 0x0d
    19e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a ef       	ldi	r20, 0xFA	; 250
    19f6:	54 e4       	ldi	r21, 0x44	; 68
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8f 83       	std	Y+7, r24	; 0x07
    1a02:	98 87       	std	Y+8, r25	; 0x08
    1a04:	a9 87       	std	Y+9, r26	; 0x09
    1a06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a08:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0a:	78 85       	ldd	r23, Y+8	; 0x08
    1a0c:	89 85       	ldd	r24, Y+9	; 0x09
    1a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <HLCD_voidInit+0x43a>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	4c f5       	brge	.+82     	; 0x1a94 <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <HLCD_voidInit+0x49a>
    1a6c:	88 ec       	ldi	r24, 0xC8	; 200
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9c 83       	std	Y+4, r25	; 0x04
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <HLCD_voidInit+0x488>
    1a7c:	9c 83       	std	Y+4, r25	; 0x04
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <HLCD_voidInit+0x47c>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	9a 83       	std	Y+2, r25	; 0x02
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <HLCD_voidInit+0x4c4>
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1abc:	ca 5b       	subi	r28, 0xBA	; 186
    1abe:	df 4f       	sbci	r29, 0xFF	; 255
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	08 95       	ret

00001ad4 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	2e 97       	sbiw	r28, 0x0e	; 14
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
	// Display Clear Command then wait for more than 1.53ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	0e 94 bc 09 	call	0x1378	; 0x1378 <HLCD_voidSendCommand>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e0       	ldi	r26, 0x00	; 0
    1af4:	b0 e4       	ldi	r27, 0x40	; 64
    1af6:	8b 87       	std	Y+11, r24	; 0x0b
    1af8:	9c 87       	std	Y+12, r25	; 0x0c
    1afa:	ad 87       	std	Y+13, r26	; 0x0d
    1afc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a ef       	ldi	r20, 0xFA	; 250
    1b0c:	54 e4       	ldi	r21, 0x44	; 68
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	8f 83       	std	Y+7, r24	; 0x07
    1b18:	98 87       	std	Y+8, r25	; 0x08
    1b1a:	a9 87       	std	Y+9, r26	; 0x09
    1b1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	3f c0       	rjmp	.+126    	; 0x1bbe <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1b40:	6f 81       	ldd	r22, Y+7	; 0x07
    1b42:	78 85       	ldd	r23, Y+8	; 0x08
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	4c f5       	brge	.+82     	; 0x1baa <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <HLCD_voidClearDisplay+0xcc>
    1b82:	88 ec       	ldi	r24, 0xC8	; 200
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <HLCD_voidClearDisplay+0xba>
    1b92:	9c 83       	std	Y+4, r25	; 0x04
    1b94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f7       	brne	.-38     	; 0x1b82 <HLCD_voidClearDisplay+0xae>
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <HLCD_voidClearDisplay+0xf6>
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1bd2:	2e 96       	adiw	r28, 0x0e	; 14
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <HLCD_voidDisplayString>:

void HLCD_voidDisplayString(u8 *A_8uPtrToString)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <HLCD_voidDisplayString+0x6>
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	0b c0       	rjmp	.+22     	; 0x1c0a <HLCD_voidDisplayString+0x26>
	while (*A_8uPtrToString > 0)
	{
		HLCD_voidSendData(*A_8uPtrToString++);
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	20 81       	ld	r18, Z
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	82 2f       	mov	r24, r18
    1c06:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <HLCD_voidSendData>
	_delay_ms(2);
}

void HLCD_voidDisplayString(u8 *A_8uPtrToString)
{
	while (*A_8uPtrToString > 0)
    1c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0e:	80 81       	ld	r24, Z
    1c10:	88 23       	and	r24, r24
    1c12:	81 f7       	brne	.-32     	; 0x1bf4 <HLCD_voidDisplayString+0x10>
	{
		HLCD_voidSendData(*A_8uPtrToString++);
	}
}
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <HLCD_voidGoToPos>:


void HLCD_voidGoToPos (LCD_ROW_e A_LCDRow, LCD_COL_e A_LCDCol)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <HLCD_voidGoToPos+0x6>
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <HLCD_voidGoToPos+0x8>
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_LCDRow)
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	3c 83       	std	Y+4, r19	; 0x04
    1c36:	2b 83       	std	Y+3, r18	; 0x03
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	91 05       	cpc	r25, r1
    1c40:	31 f0       	breq	.+12     	; 0x1c4e <HLCD_voidGoToPos+0x30>
    1c42:	2b 81       	ldd	r18, Y+3	; 0x03
    1c44:	3c 81       	ldd	r19, Y+4	; 0x04
    1c46:	22 30       	cpi	r18, 0x02	; 2
    1c48:	31 05       	cpc	r19, r1
    1c4a:	31 f0       	breq	.+12     	; 0x1c58 <HLCD_voidGoToPos+0x3a>
    1c4c:	09 c0       	rjmp	.+18     	; 0x1c60 <HLCD_voidGoToPos+0x42>
	{
	case LCD_ROW1:
		HLCD_voidSendCommand(ROW1_BASE_ADD + A_LCDCol);
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	81 58       	subi	r24, 0x81	; 129
    1c52:	0e 94 bc 09 	call	0x1378	; 0x1378 <HLCD_voidSendCommand>
    1c56:	04 c0       	rjmp	.+8      	; 0x1c60 <HLCD_voidGoToPos+0x42>
		break;
	case LCD_ROW2:
		HLCD_voidSendCommand(ROW2_BASE_ADD + A_LCDCol);
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	81 54       	subi	r24, 0x41	; 65
    1c5c:	0e 94 bc 09 	call	0x1378	; 0x1378 <HLCD_voidSendCommand>
		break;
	default:
		break;
	}
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber (u32 A_u32Number)
{
    1c6e:	ef 92       	push	r14
    1c70:	ff 92       	push	r15
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	28 97       	sbiw	r28, 0x08	; 8
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	6d 83       	std	Y+5, r22	; 0x05
    1c8c:	7e 83       	std	Y+6, r23	; 0x06
    1c8e:	8f 83       	std	Y+7, r24	; 0x07
    1c90:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Num = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 e0       	ldi	r26, 0x00	; 0
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	ab 83       	std	Y+3, r26	; 0x03
    1ca0:	bc 83       	std	Y+4, r27	; 0x04
	if (A_u32Number == 0)
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	af 81       	ldd	r26, Y+7	; 0x07
    1ca8:	b8 85       	ldd	r27, Y+8	; 0x08
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	a1 05       	cpc	r26, r1
    1cae:	b1 05       	cpc	r27, r1
    1cb0:	d1 f5       	brne	.+116    	; 0x1d26 <HLCD_voidDisplayNumber+0xb8>
	{
		HLCD_voidSendData('0');
    1cb2:	80 e3       	ldi	r24, 0x30	; 48
    1cb4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <HLCD_voidSendData>
    1cb8:	36 c0       	rjmp	.+108    	; 0x1d26 <HLCD_voidDisplayNumber+0xb8>
	}

	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	ab 81       	ldd	r26, Y+3	; 0x03
    1cc0:	bc 81       	ldd	r27, Y+4	; 0x04
    1cc2:	2a e0       	ldi	r18, 0x0A	; 10
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 08 18 	call	0x3010	; 0x3010 <__mulsi3>
    1cd2:	7b 01       	movw	r14, r22
    1cd4:	8c 01       	movw	r16, r24
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cda:	af 81       	ldd	r26, Y+7	; 0x07
    1cdc:	b8 85       	ldd	r27, Y+8	; 0x08
    1cde:	2a e0       	ldi	r18, 0x0A	; 10
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 27 18 	call	0x304e	; 0x304e <__udivmodsi4>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8e 0d       	add	r24, r14
    1cf4:	9f 1d       	adc	r25, r15
    1cf6:	a0 1f       	adc	r26, r16
    1cf8:	b1 1f       	adc	r27, r17
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	ab 83       	std	Y+3, r26	; 0x03
    1d00:	bc 83       	std	Y+4, r27	; 0x04
		A_u32Number = A_u32Number / 10;
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	af 81       	ldd	r26, Y+7	; 0x07
    1d08:	b8 85       	ldd	r27, Y+8	; 0x08
    1d0a:	2a e0       	ldi	r18, 0x0A	; 10
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 27 18 	call	0x304e	; 0x304e <__udivmodsi4>
    1d1a:	da 01       	movw	r26, r20
    1d1c:	c9 01       	movw	r24, r18
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	af 83       	std	Y+7, r26	; 0x07
    1d24:	b8 87       	std	Y+8, r27	; 0x08
	if (A_u32Number == 0)
	{
		HLCD_voidSendData('0');
	}

	while (A_u32Number != 0)
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	af 81       	ldd	r26, Y+7	; 0x07
    1d2c:	b8 85       	ldd	r27, Y+8	; 0x08
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	a1 05       	cpc	r26, r1
    1d32:	b1 05       	cpc	r27, r1
    1d34:	11 f6       	brne	.-124    	; 0x1cba <HLCD_voidDisplayNumber+0x4c>
    1d36:	23 c0       	rjmp	.+70     	; 0x1d7e <HLCD_voidDisplayNumber+0x110>
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d3e:	bc 81       	ldd	r27, Y+4	; 0x04
    1d40:	2a e0       	ldi	r18, 0x0A	; 10
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 27 18 	call	0x304e	; 0x304e <__udivmodsi4>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	80 5d       	subi	r24, 0xD0	; 208
    1d56:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <HLCD_voidSendData>
		local_u32Num = local_u32Num / 10;
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	ab 81       	ldd	r26, Y+3	; 0x03
    1d60:	bc 81       	ldd	r27, Y+4	; 0x04
    1d62:	2a e0       	ldi	r18, 0x0A	; 10
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	0e 94 27 18 	call	0x304e	; 0x304e <__udivmodsi4>
    1d72:	da 01       	movw	r26, r20
    1d74:	c9 01       	movw	r24, r18
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	9a 83       	std	Y+2, r25	; 0x02
    1d7a:	ab 83       	std	Y+3, r26	; 0x03
    1d7c:	bc 83       	std	Y+4, r27	; 0x04
	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	9a 81       	ldd	r25, Y+2	; 0x02
    1d82:	ab 81       	ldd	r26, Y+3	; 0x03
    1d84:	bc 81       	ldd	r27, Y+4	; 0x04
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	91 05       	cpc	r25, r1
    1d8a:	a1 05       	cpc	r26, r1
    1d8c:	b1 05       	cpc	r27, r1
    1d8e:	a1 f6       	brne	.-88     	; 0x1d38 <HLCD_voidDisplayNumber+0xca>
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
		local_u32Num = local_u32Num / 10;
	}
}
    1d90:	28 96       	adiw	r28, 0x08	; 8
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	08 95       	ret

00001daa <HLCD_voidSendSpecialSymbol>:


void HLCD_voidSendSpecialSymbol (u8 *A_pu8SymbolArray, LCD_PATTERNS_e A_PatternNum,LCD_ROW_e A_RowNo, LCD_COL_e A_ColNo)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	27 97       	sbiw	r28, 0x07	; 7
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	9c 83       	std	Y+4, r25	; 0x04
    1dc0:	8b 83       	std	Y+3, r24	; 0x03
    1dc2:	6d 83       	std	Y+5, r22	; 0x05
    1dc4:	4e 83       	std	Y+6, r20	; 0x06
    1dc6:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAddress;

	// Calculate CGRAM Address
	local_u8CGRAMAddress = A_PatternNum * 8;
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAddress,6);
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	80 64       	ori	r24, 0x40	; 64
    1de0:	8a 83       	std	Y+2, r24	; 0x02
	// Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	0e 94 bc 09 	call	0x1378	; 0x1378 <HLCD_voidSendCommand>

	for (u8 local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    1de8:	19 82       	std	Y+1, r1	; 0x01
    1dea:	0e c0       	rjmp	.+28     	; 0x1e08 <HLCD_voidSendSpecialSymbol+0x5e>
	{
		// Send Byte by Byte from the Symbol Array
		HLCD_voidSendData(A_pu8SymbolArray[local_u8Counter]);
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	fc 01       	movw	r30, r24
    1df8:	e2 0f       	add	r30, r18
    1dfa:	f3 1f       	adc	r31, r19
    1dfc:	80 81       	ld	r24, Z
    1dfe:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <HLCD_voidSendData>
	local_u8CGRAMAddress = A_PatternNum * 8;
	SET_BIT(local_u8CGRAMAddress,6);
	// Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAddress);

	for (u8 local_u8Counter=0; local_u8Counter<8; local_u8Counter++)
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	8f 5f       	subi	r24, 0xFF	; 255
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	88 30       	cpi	r24, 0x08	; 8
    1e0c:	78 f3       	brcs	.-34     	; 0x1dec <HLCD_voidSendSpecialSymbol+0x42>
		// Send Byte by Byte from the Symbol Array
		HLCD_voidSendData(A_pu8SymbolArray[local_u8Counter]);
	}

	// Send Command to Set DDRAM Address
	HLCD_voidGoToPos(A_RowNo, A_ColNo);
    1e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <HLCD_voidGoToPos>
	// Display Pattern
	HLCD_voidSendData(A_PatternNum);
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <HLCD_voidSendData>
}
    1e1c:	27 96       	adiw	r28, 0x07	; 7
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <HLED_voidTurnOn>:
 * HAL
 */


void HLED_voidTurnOn  (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <HLED_voidTurnOn+0x6>
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_SET);
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	6a 81       	ldd	r22, Y+2	; 0x02
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
}
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <HLED_voidTurnOff>:
void HLED_voidTurnOff (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <HLED_voidTurnOff+0x6>
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_RESET);
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	6a 81       	ldd	r22, Y+2	; 0x02
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <HLED_voidToggleLED>:
void HLED_voidToggleLED (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <HLED_voidToggleLED+0x6>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_DIOPort, A_PINID);
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	48 2f       	mov	r20, r24
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	ca 01       	movw	r24, r20
    1e8e:	b9 01       	movw	r22, r18
    1e90:	0e 94 8c 08 	call	0x1118	; 0x1118 <MDIO_voidTogglePinValue>
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <HRELAY_voidTurnOn>:
 * HAL
 */


void HRELAY_voidTurnOn  (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <HRELAY_voidTurnOn+0x6>
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_SET);
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	6a 81       	ldd	r22, Y+2	; 0x02
    1eb0:	41 e0       	ldi	r20, 0x01	; 1
    1eb2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <HRELAY_voidTurnOff>:
void HRELAY_voidTurnOff (DIO_PORT_e A_DIOPort,DIO_PIN_e A_PINID)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <HRELAY_voidTurnOff+0x6>
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_DIOPort, A_PINID, DIO_RESET);
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <MDIO_voidSetPinValue>
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <MTIMER0_voidInit>:

#define NULL 0
void (*TIMER0_OVF_CALLBACK)(void) = NULL;
void (*TIMER0_CTC_CALLBACK)(void) = NULL;

void MTIMER0_voidInit (void){
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
		 TCCR0 &= TIMER0_CLK_OCR_MASK;
		 TCCR0 |= (TIMER0_CLK | (OC0_MODE << 4));

 #elif TIMER0_MODE == FAST_PWM_MODE
		 // Set Wave Generation to Fast PWM Mode
		 SET_BIT(TCCR0,6);
    1eea:	a3 e5       	ldi	r26, 0x53	; 83
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e3 e5       	ldi	r30, 0x53	; 83
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 64       	ori	r24, 0x40	; 64
    1ef6:	8c 93       	st	X, r24
		 SET_BIT(TCCR0,3);
    1ef8:	a3 e5       	ldi	r26, 0x53	; 83
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e3 e5       	ldi	r30, 0x53	; 83
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	88 60       	ori	r24, 0x08	; 8
    1f04:	8c 93       	st	X, r24
		 //Disable OVF Interrupt, and Disable CTC Interrupt
		 CLR_BIT(TIMSK,0);
    1f06:	a9 e5       	ldi	r26, 0x59	; 89
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e5       	ldi	r30, 0x59	; 89
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	8e 7f       	andi	r24, 0xFE	; 254
    1f12:	8c 93       	st	X, r24
		 CLR_BIT(TIMSK,1);
    1f14:	a9 e5       	ldi	r26, 0x59	; 89
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e9 e5       	ldi	r30, 0x59	; 89
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	8d 7f       	andi	r24, 0xFD	; 253
    1f20:	8c 93       	st	X, r24
		 // Set Compare match value
		 OCR0 = OCR0_VALUE;
    1f22:	ec e5       	ldi	r30, 0x5C	; 92
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	10 82       	st	Z, r1
		 // SET OC0 Configuraion
		 // Start Timer by setting its Clock and also set OC0 Pin Mode
		 TCCR0 &= TIMER0_CLK_OCR_MASK;
    1f28:	a3 e5       	ldi	r26, 0x53	; 83
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e3 e5       	ldi	r30, 0x53	; 83
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	88 7c       	andi	r24, 0xC8	; 200
    1f34:	8c 93       	st	X, r24
		 TCCR0 |= (TIMER0_CLK | (OC0_MODE << 4));
    1f36:	a3 e5       	ldi	r26, 0x53	; 83
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e3 e5       	ldi	r30, 0x53	; 83
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	82 62       	ori	r24, 0x22	; 34
    1f42:	8c 93       	st	X, r24
#endif
}
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <MTIMER0_voidSetPreloadValue>:
void MTIMER0_voidSetPreloadValue (u8 A_u8NoOfTicks){
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	0f 92       	push	r0
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=A_u8NoOfTicks;
    1f56:	e2 e5       	ldi	r30, 0x52	; 82
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	80 83       	st	Z, r24
}
    1f5e:	0f 90       	pop	r0
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <MTIMER0_voidStopTimer>:
void MTIMER0_voidStopTimer (void)
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLK_MASK;
    1f6e:	a3 e5       	ldi	r26, 0x53	; 83
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e3 e5       	ldi	r30, 0x53	; 83
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	88 7f       	andi	r24, 0xF8	; 248
    1f7a:	8c 93       	st	X, r24
}
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <MTIMER0_voidSetOCR0Value>:
void MTIMER0_voidSetOCR0Value (u8 A_u8OCR0Value)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	0f 92       	push	r0
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8OCR0Value;
    1f8e:	ec e5       	ldi	r30, 0x5C	; 92
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	80 83       	st	Z, r24
}
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <MTIMER0_voidSetOVFCallback>:
void MTIMER0_voidSetOVFCallback (void (*A_PtrToFunc)(void)){
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <MTIMER0_voidSetOVFCallback+0x6>
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	31 f0       	breq	.+12     	; 0x1fc0 <MTIMER0_voidSetOVFCallback+0x22>
		{
			TIMER0_OVF_CALLBACK = A_PtrToFunc;
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	90 93 41 04 	sts	0x0441, r25
    1fbc:	80 93 40 04 	sts	0x0440, r24
		}
}
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <MTIMER0_voidSetCTCCallback>:
void MTIMER0_voidSetCTCCallback (void (*A_PtrToFunc)(void))
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <MTIMER0_voidSetCTCCallback+0x6>
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	9a 83       	std	Y+2, r25	; 0x02
    1fd6:	89 83       	std	Y+1, r24	; 0x01
	if (A_PtrToFunc != NULL)
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	9a 81       	ldd	r25, Y+2	; 0x02
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	31 f0       	breq	.+12     	; 0x1fec <MTIMER0_voidSetCTCCallback+0x22>
	{
		TIMER0_CTC_CALLBACK = A_PtrToFunc;
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	90 93 43 04 	sts	0x0443, r25
    1fe8:	80 93 42 04 	sts	0x0442, r24
	}
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <__vector_10>:


void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1ff6:	1f 92       	push	r1
    1ff8:	0f 92       	push	r0
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	0f 92       	push	r0
    1ffe:	11 24       	eor	r1, r1
    2000:	2f 93       	push	r18
    2002:	3f 93       	push	r19
    2004:	4f 93       	push	r20
    2006:	5f 93       	push	r21
    2008:	6f 93       	push	r22
    200a:	7f 93       	push	r23
    200c:	8f 93       	push	r24
    200e:	9f 93       	push	r25
    2010:	af 93       	push	r26
    2012:	bf 93       	push	r27
    2014:	ef 93       	push	r30
    2016:	ff 93       	push	r31
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_CTC_CALLBACK != NULL)
    2020:	80 91 42 04 	lds	r24, 0x0442
    2024:	90 91 43 04 	lds	r25, 0x0443
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	29 f0       	breq	.+10     	; 0x2036 <__vector_10+0x40>
	{
		TIMER0_CTC_CALLBACK();
    202c:	e0 91 42 04 	lds	r30, 0x0442
    2030:	f0 91 43 04 	lds	r31, 0x0443
    2034:	09 95       	icall
	}
}
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	ff 91       	pop	r31
    203c:	ef 91       	pop	r30
    203e:	bf 91       	pop	r27
    2040:	af 91       	pop	r26
    2042:	9f 91       	pop	r25
    2044:	8f 91       	pop	r24
    2046:	7f 91       	pop	r23
    2048:	6f 91       	pop	r22
    204a:	5f 91       	pop	r21
    204c:	4f 91       	pop	r20
    204e:	3f 91       	pop	r19
    2050:	2f 91       	pop	r18
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	0f 90       	pop	r0
    2058:	1f 90       	pop	r1
    205a:	18 95       	reti

0000205c <__vector_11>:
void __vector_11(void)__attribute__((signal));
void __vector_11(void){
    205c:	1f 92       	push	r1
    205e:	0f 92       	push	r0
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	0f 92       	push	r0
    2064:	11 24       	eor	r1, r1
    2066:	2f 93       	push	r18
    2068:	3f 93       	push	r19
    206a:	4f 93       	push	r20
    206c:	5f 93       	push	r21
    206e:	6f 93       	push	r22
    2070:	7f 93       	push	r23
    2072:	8f 93       	push	r24
    2074:	9f 93       	push	r25
    2076:	af 93       	push	r26
    2078:	bf 93       	push	r27
    207a:	ef 93       	push	r30
    207c:	ff 93       	push	r31
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CALLBACK != NULL)
    2086:	80 91 40 04 	lds	r24, 0x0440
    208a:	90 91 41 04 	lds	r25, 0x0441
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	29 f0       	breq	.+10     	; 0x209c <__vector_11+0x40>
		{
			TIMER0_OVF_CALLBACK();
    2092:	e0 91 40 04 	lds	r30, 0x0440
    2096:	f0 91 41 04 	lds	r31, 0x0441
    209a:	09 95       	icall
		}
}
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	ff 91       	pop	r31
    20a2:	ef 91       	pop	r30
    20a4:	bf 91       	pop	r27
    20a6:	af 91       	pop	r26
    20a8:	9f 91       	pop	r25
    20aa:	8f 91       	pop	r24
    20ac:	7f 91       	pop	r23
    20ae:	6f 91       	pop	r22
    20b0:	5f 91       	pop	r21
    20b2:	4f 91       	pop	r20
    20b4:	3f 91       	pop	r19
    20b6:	2f 91       	pop	r18
    20b8:	0f 90       	pop	r0
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	0f 90       	pop	r0
    20be:	1f 90       	pop	r1
    20c0:	18 95       	reti

000020c2 <MUART_voidInit>:
#define NULL 0

static void (*FuncPtr[3]) (void) = {NULL,NULL,NULL};

void MUART_voidInit(void)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <MUART_voidInit+0x6>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16BaudRate = BAUD_RATE_EQUATION;
    20cc:	83 e3       	ldi	r24, 0x33	; 51
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
	// Set Baudrate
	UBRRL = (u8) local_u16BaudRate;
    20d4:	e9 e2       	ldi	r30, 0x29	; 41
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	80 83       	st	Z, r24
	UBRRH = (u8) (local_u16BaudRate >> 8);
    20dc:	e0 e4       	ldi	r30, 0x40	; 64
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	89 2f       	mov	r24, r25
    20e6:	99 27       	eor	r25, r25
    20e8:	80 83       	st	Z, r24

	// Character Size 8-bit
	CLR_BIT(UCSRB,2);
    20ea:	aa e2       	ldi	r26, 0x2A	; 42
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	ea e2       	ldi	r30, 0x2A	; 42
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	8b 7f       	andi	r24, 0xFB	; 251
    20f6:	8c 93       	st	X, r24

	// Character Size 8-bit
	// Mode Asynchronous operation
	// Parity Disabled
	// 1 Stop Bit
	UCSRC = CONC_BIT(1,0,0,0,0,1,1,0);
    20f8:	e0 e4       	ldi	r30, 0x40	; 64
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	86 e8       	ldi	r24, 0x86	; 134
    20fe:	80 83       	st	Z, r24

	// Enable Receiver
	// Enable Transmitter
	SET_BIT(UCSRB,3);
    2100:	aa e2       	ldi	r26, 0x2A	; 42
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	ea e2       	ldi	r30, 0x2A	; 42
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	88 60       	ori	r24, 0x08	; 8
    210c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
    210e:	aa e2       	ldi	r26, 0x2A	; 42
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ea e2       	ldi	r30, 0x2A	; 42
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	80 61       	ori	r24, 0x10	; 16
    211a:	8c 93       	st	X, r24
}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <MUART_voidSendByteSyncBlocking>:


void MUART_voidSendByteSyncBlocking (u8 A_u8DataByte)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	0f 92       	push	r0
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0);
    2132:	eb e2       	ldi	r30, 0x2B	; 43
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	82 95       	swap	r24
    213a:	86 95       	lsr	r24
    213c:	87 70       	andi	r24, 0x07	; 7
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	81 70       	andi	r24, 0x01	; 1
    2144:	90 70       	andi	r25, 0x00	; 0
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	a1 f3       	breq	.-24     	; 0x2132 <MUART_voidSendByteSyncBlocking+0xc>

	// Set Data into Tx Register and start Transmission
	UDR = A_u8DataByte;
    214a:	ec e2       	ldi	r30, 0x2C	; 44
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	80 83       	st	Z, r24

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0);
    2152:	eb e2       	ldi	r30, 0x2B	; 43
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	82 95       	swap	r24
    215a:	86 95       	lsr	r24
    215c:	87 70       	andi	r24, 0x07	; 7
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	81 70       	andi	r24, 0x01	; 1
    2164:	90 70       	andi	r25, 0x00	; 0
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	a1 f3       	breq	.-24     	; 0x2152 <MUART_voidSendByteSyncBlocking+0x2c>

	// Clear transmit Interrupt flag
	SET_BIT(UCSRA,6);
    216a:	ab e2       	ldi	r26, 0x2B	; 43
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	eb e2       	ldi	r30, 0x2B	; 43
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	80 64       	ori	r24, 0x40	; 64
    2176:	8c 93       	st	X, r24

}
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <MUART_voidSendByteSyncNonBlocking>:

void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	00 d0       	rcall	.+0      	; 0x2186 <MUART_voidSendByteSyncNonBlocking+0x6>
    2186:	00 d0       	rcall	.+0      	; 0x2188 <MUART_voidSendByteSyncNonBlocking+0x8>
    2188:	0f 92       	push	r0
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Timeout=0;
    2190:	19 82       	std	Y+1, r1	; 0x01
    2192:	1a 82       	std	Y+2, r1	; 0x02
    2194:	1b 82       	std	Y+3, r1	; 0x03
    2196:	1c 82       	std	Y+4, r1	; 0x04
    2198:	17 c0       	rjmp	.+46     	; 0x21c8 <MUART_voidSendByteSyncNonBlocking+0x48>

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0)
	{
		local_u32Timeout++;
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	ab 81       	ldd	r26, Y+3	; 0x03
    21a0:	bc 81       	ldd	r27, Y+4	; 0x04
    21a2:	01 96       	adiw	r24, 0x01	; 1
    21a4:	a1 1d       	adc	r26, r1
    21a6:	b1 1d       	adc	r27, r1
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	9a 83       	std	Y+2, r25	; 0x02
    21ac:	ab 83       	std	Y+3, r26	; 0x03
    21ae:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	9a 81       	ldd	r25, Y+2	; 0x02
    21b4:	ab 81       	ldd	r26, Y+3	; 0x03
    21b6:	bc 81       	ldd	r27, Y+4	; 0x04
    21b8:	88 38       	cpi	r24, 0x88	; 136
    21ba:	23 e1       	ldi	r18, 0x13	; 19
    21bc:	92 07       	cpc	r25, r18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	a2 07       	cpc	r26, r18
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	b2 07       	cpc	r27, r18
    21c6:	61 f0       	breq	.+24     	; 0x21e0 <MUART_voidSendByteSyncNonBlocking+0x60>
void MUART_voidSendByteSyncNonBlocking (u8 A_u8DataByte)
{
	u32 local_u32Timeout=0;

	// wait until UDR is empty
	while (GET_BIT(UCSRA,5)==0)
    21c8:	eb e2       	ldi	r30, 0x2B	; 43
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	82 95       	swap	r24
    21d0:	86 95       	lsr	r24
    21d2:	87 70       	andi	r24, 0x07	; 7
    21d4:	88 2f       	mov	r24, r24
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	81 70       	andi	r24, 0x01	; 1
    21da:	90 70       	andi	r25, 0x00	; 0
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	e9 f2       	breq	.-70     	; 0x219a <MUART_voidSendByteSyncNonBlocking+0x1a>
		{
			break;
		}
	}

	if (local_u32Timeout != NON_BLOCKING_TIME_OUT)
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	9a 81       	ldd	r25, Y+2	; 0x02
    21e4:	ab 81       	ldd	r26, Y+3	; 0x03
    21e6:	bc 81       	ldd	r27, Y+4	; 0x04
    21e8:	88 38       	cpi	r24, 0x88	; 136
    21ea:	23 e1       	ldi	r18, 0x13	; 19
    21ec:	92 07       	cpc	r25, r18
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	a2 07       	cpc	r26, r18
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	b2 07       	cpc	r27, r18
    21f6:	99 f1       	breq	.+102    	; 0x225e <MUART_voidSendByteSyncNonBlocking+0xde>
	{
		local_u32Timeout = 0;
    21f8:	19 82       	std	Y+1, r1	; 0x01
    21fa:	1a 82       	std	Y+2, r1	; 0x02
    21fc:	1b 82       	std	Y+3, r1	; 0x03
    21fe:	1c 82       	std	Y+4, r1	; 0x04
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;
    2200:	ec e2       	ldi	r30, 0x2C	; 44
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	80 83       	st	Z, r24
    2208:	17 c0       	rjmp	.+46     	; 0x2238 <MUART_voidSendByteSyncNonBlocking+0xb8>
		// wait until UDR is empty
		while (GET_BIT(UCSRA,5)==0)
		{
			local_u32Timeout++;
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	9a 81       	ldd	r25, Y+2	; 0x02
    220e:	ab 81       	ldd	r26, Y+3	; 0x03
    2210:	bc 81       	ldd	r27, Y+4	; 0x04
    2212:	01 96       	adiw	r24, 0x01	; 1
    2214:	a1 1d       	adc	r26, r1
    2216:	b1 1d       	adc	r27, r1
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	9a 83       	std	Y+2, r25	; 0x02
    221c:	ab 83       	std	Y+3, r26	; 0x03
    221e:	bc 83       	std	Y+4, r27	; 0x04
			if (local_u32Timeout == NON_BLOCKING_TIME_OUT)
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	ab 81       	ldd	r26, Y+3	; 0x03
    2226:	bc 81       	ldd	r27, Y+4	; 0x04
    2228:	88 38       	cpi	r24, 0x88	; 136
    222a:	23 e1       	ldi	r18, 0x13	; 19
    222c:	92 07       	cpc	r25, r18
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	a2 07       	cpc	r26, r18
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	b2 07       	cpc	r27, r18
    2236:	61 f0       	breq	.+24     	; 0x2250 <MUART_voidSendByteSyncNonBlocking+0xd0>
	{
		local_u32Timeout = 0;
		// Set Data into Tx Register and start Transmission
		UDR = A_u8DataByte;
		// wait until UDR is empty
		while (GET_BIT(UCSRA,5)==0)
    2238:	eb e2       	ldi	r30, 0x2B	; 43
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	82 95       	swap	r24
    2240:	86 95       	lsr	r24
    2242:	87 70       	andi	r24, 0x07	; 7
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	81 70       	andi	r24, 0x01	; 1
    224a:	90 70       	andi	r25, 0x00	; 0
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	e9 f2       	breq	.-70     	; 0x220a <MUART_voidSendByteSyncNonBlocking+0x8a>
			{
				break;
			}
		}
		// Clear transmit Interrupt flag
		SET_BIT(UCSRA,6);
    2250:	ab e2       	ldi	r26, 0x2B	; 43
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	eb e2       	ldi	r30, 0x2B	; 43
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 64       	ori	r24, 0x40	; 64
    225c:	8c 93       	st	X, r24
	}

}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <MUART_voidSendStringSyncNonBlocking>:


void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	00 d0       	rcall	.+0      	; 0x2274 <MUART_voidSendStringSyncNonBlocking+0x6>
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	89 83       	std	Y+1, r24	; 0x01
    227c:	0b c0       	rjmp	.+22     	; 0x2294 <MUART_voidSendStringSyncNonBlocking+0x26>
	while(*A_pu8String > 0)
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
    227e:	e9 81       	ldd	r30, Y+1	; 0x01
    2280:	fa 81       	ldd	r31, Y+2	; 0x02
    2282:	20 81       	ld	r18, Z
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	9a 83       	std	Y+2, r25	; 0x02
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	82 2f       	mov	r24, r18
    2290:	0e 94 c0 10 	call	0x2180	; 0x2180 <MUART_voidSendByteSyncNonBlocking>
}


void MUART_voidSendStringSyncNonBlocking (u8 *A_pu8String)
{
	while(*A_pu8String > 0)
    2294:	e9 81       	ldd	r30, Y+1	; 0x01
    2296:	fa 81       	ldd	r31, Y+2	; 0x02
    2298:	80 81       	ld	r24, Z
    229a:	88 23       	and	r24, r24
    229c:	81 f7       	brne	.-32     	; 0x227e <MUART_voidSendStringSyncNonBlocking+0x10>
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
	}
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <MUART_voidSendByteAsync>:


void MUART_voidSendByteAsync (u8 A_u8DataByte)
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	0f 92       	push	r0
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	89 83       	std	Y+1, r24	; 0x01
	// Check if Data Register is empty
	if (GET_BIT(UCSRA,5)==1)
    22b4:	eb e2       	ldi	r30, 0x2B	; 43
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	82 95       	swap	r24
    22bc:	86 95       	lsr	r24
    22be:	87 70       	andi	r24, 0x07	; 7
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	81 70       	andi	r24, 0x01	; 1
    22c6:	90 70       	andi	r25, 0x00	; 0
    22c8:	88 23       	and	r24, r24
    22ca:	21 f0       	breq	.+8      	; 0x22d4 <MUART_voidSendByteAsync+0x2c>
	{
		// Send Data
		UDR = A_u8DataByte;
    22cc:	ec e2       	ldi	r30, 0x2C	; 44
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	80 83       	st	Z, r24
	}
}
    22d4:	0f 90       	pop	r0
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <MUART_u8ReadByteSyncBlocking>:


u8 MUART_u8ReadByteSyncBlocking (void)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0);
    22e4:	eb e2       	ldi	r30, 0x2B	; 43
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	88 23       	and	r24, r24
    22ec:	dc f7       	brge	.-10     	; 0x22e4 <MUART_u8ReadByteSyncBlocking+0x8>

	return UDR;
    22ee:	ec e2       	ldi	r30, 0x2C	; 44
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
}
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <MUART_voidReadStringSyncBlocking>:
void MUART_voidReadStringSyncBlocking(u8 *str){
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <MUART_voidReadStringSyncBlocking+0xa>
    2304:	0f 92       	push	r0
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	9b 83       	std	Y+3, r25	; 0x03
    230c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    230e:	19 82       	std	Y+1, r1	; 0x01
    str[i]= MUART_u8ReadByteSyncBlocking ();
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	8c 01       	movw	r16, r24
    231c:	02 0f       	add	r16, r18
    231e:	13 1f       	adc	r17, r19
    2320:	0e 94 6e 11 	call	0x22dc	; 0x22dc <MUART_u8ReadByteSyncBlocking>
    2324:	f8 01       	movw	r30, r16
    2326:	80 83       	st	Z, r24
    2328:	0f c0       	rjmp	.+30     	; 0x2348 <MUART_voidReadStringSyncBlocking+0x4e>
	while(str[i]!='='){
		i++;
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	8f 5f       	subi	r24, 0xFF	; 255
    232e:	89 83       	std	Y+1, r24	; 0x01
		str[i]= MUART_u8ReadByteSyncBlocking ();
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	8c 01       	movw	r16, r24
    233c:	02 0f       	add	r16, r18
    233e:	13 1f       	adc	r17, r19
    2340:	0e 94 6e 11 	call	0x22dc	; 0x22dc <MUART_u8ReadByteSyncBlocking>
    2344:	f8 01       	movw	r30, r16
    2346:	80 83       	st	Z, r24
	return UDR;
}
void MUART_voidReadStringSyncBlocking(u8 *str){
	u8 i=0;
    str[i]= MUART_u8ReadByteSyncBlocking ();
	while(str[i]!='='){
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	9b 81       	ldd	r25, Y+3	; 0x03
    2352:	fc 01       	movw	r30, r24
    2354:	e2 0f       	add	r30, r18
    2356:	f3 1f       	adc	r31, r19
    2358:	80 81       	ld	r24, Z
    235a:	8d 33       	cpi	r24, 0x3D	; 61
    235c:	31 f7       	brne	.-52     	; 0x232a <MUART_voidReadStringSyncBlocking+0x30>
		i++;
		str[i]= MUART_u8ReadByteSyncBlocking ();
	}
	str[i]='\0';
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	9b 81       	ldd	r25, Y+3	; 0x03
    2368:	fc 01       	movw	r30, r24
    236a:	e2 0f       	add	r30, r18
    236c:	f3 1f       	adc	r31, r19
    236e:	10 82       	st	Z, r1
}
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	1f 91       	pop	r17
    237c:	0f 91       	pop	r16
    237e:	08 95       	ret

00002380 <MUART_u8ReadByteAsync>:
u8 MUART_u8ReadByteAsync (void)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    2388:	ec e2       	ldi	r30, 0x2C	; 44
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
}
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <MUART_u8ReadByteSyncNonBlocking>:

u8 MUART_u8ReadByteSyncNonBlocking (void)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	00 d0       	rcall	.+0      	; 0x239a <MUART_u8ReadByteSyncNonBlocking+0x6>
    239a:	0f 92       	push	r0
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
    23a0:	8f ef       	ldi	r24, 0xFF	; 255
    23a2:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16Timeout = 0;
    23a4:	1a 82       	std	Y+2, r1	; 0x02
    23a6:	19 82       	std	Y+1, r1	; 0x01
    23a8:	0b c0       	rjmp	.+22     	; 0x23c0 <MUART_u8ReadByteSyncNonBlocking+0x2c>
	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0)
	{
		local_u16Timeout++;
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	01 96       	adiw	r24, 0x01	; 1
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	89 83       	std	Y+1, r24	; 0x01
		if (local_u16Timeout == NON_BLOCKING_TIME_OUT)
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	23 e1       	ldi	r18, 0x13	; 19
    23ba:	88 38       	cpi	r24, 0x88	; 136
    23bc:	92 07       	cpc	r25, r18
    23be:	29 f0       	breq	.+10     	; 0x23ca <MUART_u8ReadByteSyncNonBlocking+0x36>
u8 MUART_u8ReadByteSyncNonBlocking (void)
{
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
	u16 local_u16Timeout = 0;
	// Wait for Rx Flag
	while(GET_BIT(UCSRA,7)==0)
    23c0:	eb e2       	ldi	r30, 0x2B	; 43
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	88 23       	and	r24, r24
    23c8:	84 f7       	brge	.-32     	; 0x23aa <MUART_u8ReadByteSyncNonBlocking+0x16>
		{
			break;
		}
	}

	if (local_u16Timeout != NON_BLOCKING_TIME_OUT)
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	23 e1       	ldi	r18, 0x13	; 19
    23d0:	88 38       	cpi	r24, 0x88	; 136
    23d2:	92 07       	cpc	r25, r18
    23d4:	21 f0       	breq	.+8      	; 0x23de <MUART_u8ReadByteSyncNonBlocking+0x4a>
	{
		// Read Received Data from the UDR
		local_u8ReceivedData = UDR;
    23d6:	ec e2       	ldi	r30, 0x2C	; 44
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	8b 83       	std	Y+3, r24	; 0x03
	}
	return local_u8ReceivedData;
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <MUART_voidSetCallBack>:



void MUART_voidSetCallBack (UART_INTERRUPTS_e A_InterruptSource , void (*A_PtoFunc)(void))
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <MUART_voidSetCallBack+0x6>
    23f2:	0f 92       	push	r0
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	7b 83       	std	Y+3, r23	; 0x03
    23fc:	6a 83       	std	Y+2, r22	; 0x02
	if ((A_InterruptSource<=UART_TX_INTERRUPT)&&(A_PtoFunc != NULL))
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	83 30       	cpi	r24, 0x03	; 3
    2402:	80 f4       	brcc	.+32     	; 0x2424 <MUART_voidSetCallBack+0x38>
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	9b 81       	ldd	r25, Y+3	; 0x03
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	61 f0       	breq	.+24     	; 0x2424 <MUART_voidSetCallBack+0x38>
	{
		FuncPtr [A_InterruptSource] = A_PtoFunc;
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	fc 01       	movw	r30, r24
    2418:	ec 5b       	subi	r30, 0xBC	; 188
    241a:	fb 4f       	sbci	r31, 0xFB	; 251
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	9b 81       	ldd	r25, Y+3	; 0x03
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	80 83       	st	Z, r24
	}
}
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <__vector_13>:


void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    2430:	1f 92       	push	r1
    2432:	0f 92       	push	r0
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	0f 92       	push	r0
    2438:	11 24       	eor	r1, r1
    243a:	2f 93       	push	r18
    243c:	3f 93       	push	r19
    243e:	4f 93       	push	r20
    2440:	5f 93       	push	r21
    2442:	6f 93       	push	r22
    2444:	7f 93       	push	r23
    2446:	8f 93       	push	r24
    2448:	9f 93       	push	r25
    244a:	af 93       	push	r26
    244c:	bf 93       	push	r27
    244e:	ef 93       	push	r30
    2450:	ff 93       	push	r31
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_RX_INTERRUPT] != NULL)
    245a:	80 91 44 04 	lds	r24, 0x0444
    245e:	90 91 45 04 	lds	r25, 0x0445
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	29 f0       	breq	.+10     	; 0x2470 <__vector_13+0x40>
	{
		FuncPtr[UART_RX_INTERRUPT]();
    2466:	e0 91 44 04 	lds	r30, 0x0444
    246a:	f0 91 45 04 	lds	r31, 0x0445
    246e:	09 95       	icall
	}
}
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	ff 91       	pop	r31
    2476:	ef 91       	pop	r30
    2478:	bf 91       	pop	r27
    247a:	af 91       	pop	r26
    247c:	9f 91       	pop	r25
    247e:	8f 91       	pop	r24
    2480:	7f 91       	pop	r23
    2482:	6f 91       	pop	r22
    2484:	5f 91       	pop	r21
    2486:	4f 91       	pop	r20
    2488:	3f 91       	pop	r19
    248a:	2f 91       	pop	r18
    248c:	0f 90       	pop	r0
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	0f 90       	pop	r0
    2492:	1f 90       	pop	r1
    2494:	18 95       	reti

00002496 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    2496:	1f 92       	push	r1
    2498:	0f 92       	push	r0
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	0f 92       	push	r0
    249e:	11 24       	eor	r1, r1
    24a0:	2f 93       	push	r18
    24a2:	3f 93       	push	r19
    24a4:	4f 93       	push	r20
    24a6:	5f 93       	push	r21
    24a8:	6f 93       	push	r22
    24aa:	7f 93       	push	r23
    24ac:	8f 93       	push	r24
    24ae:	9f 93       	push	r25
    24b0:	af 93       	push	r26
    24b2:	bf 93       	push	r27
    24b4:	ef 93       	push	r30
    24b6:	ff 93       	push	r31
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_UDRE_INTERRUPT] != NULL)
    24c0:	80 91 46 04 	lds	r24, 0x0446
    24c4:	90 91 47 04 	lds	r25, 0x0447
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	29 f0       	breq	.+10     	; 0x24d6 <__vector_14+0x40>
	{
		FuncPtr[UART_UDRE_INTERRUPT]();
    24cc:	e0 91 46 04 	lds	r30, 0x0446
    24d0:	f0 91 47 04 	lds	r31, 0x0447
    24d4:	09 95       	icall
	}
}
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	ff 91       	pop	r31
    24dc:	ef 91       	pop	r30
    24de:	bf 91       	pop	r27
    24e0:	af 91       	pop	r26
    24e2:	9f 91       	pop	r25
    24e4:	8f 91       	pop	r24
    24e6:	7f 91       	pop	r23
    24e8:	6f 91       	pop	r22
    24ea:	5f 91       	pop	r21
    24ec:	4f 91       	pop	r20
    24ee:	3f 91       	pop	r19
    24f0:	2f 91       	pop	r18
    24f2:	0f 90       	pop	r0
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	0f 90       	pop	r0
    24f8:	1f 90       	pop	r1
    24fa:	18 95       	reti

000024fc <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    24fc:	1f 92       	push	r1
    24fe:	0f 92       	push	r0
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	0f 92       	push	r0
    2504:	11 24       	eor	r1, r1
    2506:	2f 93       	push	r18
    2508:	3f 93       	push	r19
    250a:	4f 93       	push	r20
    250c:	5f 93       	push	r21
    250e:	6f 93       	push	r22
    2510:	7f 93       	push	r23
    2512:	8f 93       	push	r24
    2514:	9f 93       	push	r25
    2516:	af 93       	push	r26
    2518:	bf 93       	push	r27
    251a:	ef 93       	push	r30
    251c:	ff 93       	push	r31
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
	if (FuncPtr[UART_TX_INTERRUPT] != NULL)
    2526:	80 91 48 04 	lds	r24, 0x0448
    252a:	90 91 49 04 	lds	r25, 0x0449
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	29 f0       	breq	.+10     	; 0x253c <__vector_15+0x40>
	{
		FuncPtr[UART_TX_INTERRUPT]();
    2532:	e0 91 48 04 	lds	r30, 0x0448
    2536:	f0 91 49 04 	lds	r31, 0x0449
    253a:	09 95       	icall
	}
}
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	ff 91       	pop	r31
    2542:	ef 91       	pop	r30
    2544:	bf 91       	pop	r27
    2546:	af 91       	pop	r26
    2548:	9f 91       	pop	r25
    254a:	8f 91       	pop	r24
    254c:	7f 91       	pop	r23
    254e:	6f 91       	pop	r22
    2550:	5f 91       	pop	r21
    2552:	4f 91       	pop	r20
    2554:	3f 91       	pop	r19
    2556:	2f 91       	pop	r18
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	0f 90       	pop	r0
    255e:	1f 90       	pop	r1
    2560:	18 95       	reti

00002562 <home>:
u8 local_u8ReceivedData[10];
u8 username[10][10]={"farida","aya","azza","menna","mohamed","ahmed","karim","omar","mariam","dalia"};
u8 password[10][10]={"000","111","333","444","232","888","222","1111","0000","4444"};

u8 home()
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	aa 97       	sbiw	r28, 0x2a	; 42
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
	   u32 correct_user=0,count=0;
    2576:	1f a2       	std	Y+39, r1	; 0x27
    2578:	18 a6       	std	Y+40, r1	; 0x28
    257a:	19 a6       	std	Y+41, r1	; 0x29
    257c:	1a a6       	std	Y+42, r1	; 0x2a
    257e:	1b a2       	std	Y+35, r1	; 0x23
    2580:	1c a2       	std	Y+36, r1	; 0x24
    2582:	1d a2       	std	Y+37, r1	; 0x25
    2584:	1e a2       	std	Y+38, r1	; 0x26
       u32 correct_password=0;
    2586:	1f 8e       	std	Y+31, r1	; 0x1f
    2588:	18 a2       	std	Y+32, r1	; 0x20
    258a:	19 a2       	std	Y+33, r1	; 0x21
    258c:	1a a2       	std	Y+34, r1	; 0x22
    258e:	1e c1       	rjmp	.+572    	; 0x27cc <home+0x26a>


		while((correct_user==0)&&(count<3)){
			MUART_voidSendStringSyncNonBlocking("Enter Username\r\n");
    2590:	80 e6       	ldi	r24, 0x60	; 96
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
			HLCD_voidClearDisplay();
    2598:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
			HLCD_voidDisplayString("Enter Username:");
    259c:	81 e7       	ldi	r24, 0x71	; 113
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>

			MUART_voidReadStringSyncBlocking(local_u8ReceivedData);
    25a4:	8a e4       	ldi	r24, 0x4A	; 74
    25a6:	94 e0       	ldi	r25, 0x04	; 4
    25a8:	0e 94 7d 11 	call	0x22fa	; 0x22fa <MUART_voidReadStringSyncBlocking>

			for(u8 i=0;i<10;i++)
    25ac:	1e 8e       	std	Y+30, r1	; 0x1e
    25ae:	ff c0       	rjmp	.+510    	; 0x27ae <home+0x24c>
		{
				if(strcmp(local_u8ReceivedData,username[i])==0)
    25b0:	47 e7       	ldi	r20, 0x77	; 119
    25b2:	53 e0       	ldi	r21, 0x03	; 3
    25b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25b6:	88 2f       	mov	r24, r24
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	9c 01       	movw	r18, r24
    25bc:	22 0f       	add	r18, r18
    25be:	33 1f       	adc	r19, r19
    25c0:	c9 01       	movw	r24, r18
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	82 0f       	add	r24, r18
    25cc:	93 1f       	adc	r25, r19
    25ce:	9a 01       	movw	r18, r20
    25d0:	28 0f       	add	r18, r24
    25d2:	39 1f       	adc	r19, r25
    25d4:	8a e4       	ldi	r24, 0x4A	; 74
    25d6:	94 e0       	ldi	r25, 0x04	; 4
    25d8:	b9 01       	movw	r22, r18
    25da:	0e 94 80 18 	call	0x3100	; 0x3100 <strcmp>
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	09 f0       	breq	.+2      	; 0x25e4 <home+0x82>
    25e2:	e2 c0       	rjmp	.+452    	; 0x27a8 <home+0x246>
				{
				 correct_user=1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	a0 e0       	ldi	r26, 0x00	; 0
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	8f a3       	std	Y+39, r24	; 0x27
    25ee:	98 a7       	std	Y+40, r25	; 0x28
    25f0:	a9 a7       	std	Y+41, r26	; 0x29
    25f2:	ba a7       	std	Y+42, r27	; 0x2a

				 HLCD_voidClearDisplay();
    25f4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
				 HLCD_voidDisplayString("Enter password:");
    25f8:	81 e8       	ldi	r24, 0x81	; 129
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
				 MUART_voidSendStringSyncNonBlocking("Enter password \r\n");
    2600:	81 e9       	ldi	r24, 0x91	; 145
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
				 for (u8 k=0;k<3;k++){
    2608:	1d 8e       	std	Y+29, r1	; 0x1d
    260a:	ca c0       	rjmp	.+404    	; 0x27a0 <home+0x23e>
					 MUART_voidReadStringSyncBlocking(local_u8ReceivedData);
    260c:	8a e4       	ldi	r24, 0x4A	; 74
    260e:	94 e0       	ldi	r25, 0x04	; 4
    2610:	0e 94 7d 11 	call	0x22fa	; 0x22fa <MUART_voidReadStringSyncBlocking>
				 if(strcmp(local_u8ReceivedData,password[i])==0)
    2614:	4b ed       	ldi	r20, 0xDB	; 219
    2616:	53 e0       	ldi	r21, 0x03	; 3
    2618:	8e 8d       	ldd	r24, Y+30	; 0x1e
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9c 01       	movw	r18, r24
    2620:	22 0f       	add	r18, r18
    2622:	33 1f       	adc	r19, r19
    2624:	c9 01       	movw	r24, r18
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	88 0f       	add	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	82 0f       	add	r24, r18
    2630:	93 1f       	adc	r25, r19
    2632:	9a 01       	movw	r18, r20
    2634:	28 0f       	add	r18, r24
    2636:	39 1f       	adc	r19, r25
    2638:	8a e4       	ldi	r24, 0x4A	; 74
    263a:	94 e0       	ldi	r25, 0x04	; 4
    263c:	b9 01       	movw	r22, r18
    263e:	0e 94 80 18 	call	0x3100	; 0x3100 <strcmp>
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	49 f4       	brne	.+18     	; 0x2658 <home+0xf6>
				 {
					 correct_password=1;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e0       	ldi	r26, 0x00	; 0
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	8f 8f       	std	Y+31, r24	; 0x1f
    2650:	98 a3       	std	Y+32, r25	; 0x20
    2652:	a9 a3       	std	Y+33, r26	; 0x21
    2654:	ba a3       	std	Y+34, r27	; 0x22
    2656:	a8 c0       	rjmp	.+336    	; 0x27a8 <home+0x246>
					 break;
				 }
				 else{
					 if (k<2){
    2658:	8d 8d       	ldd	r24, Y+29	; 0x1d
    265a:	82 30       	cpi	r24, 0x02	; 2
    265c:	90 f4       	brcc	.+36     	; 0x2682 <home+0x120>
						 HLCD_voidClearDisplay();
    265e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
						 HLCD_voidDisplayString("Wrong password");
    2662:	83 ea       	ldi	r24, 0xA3	; 163
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
						 HLCD_voidGoToPos (LCD_ROW2, LCD_COL1);
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	61 e0       	ldi	r22, 0x01	; 1
    266e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <HLCD_voidGoToPos>
						 HLCD_voidDisplayString("try again");
    2672:	82 eb       	ldi	r24, 0xB2	; 178
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
					 MUART_voidSendStringSyncNonBlocking("Wrong password try again \r\n");
    267a:	8c eb       	ldi	r24, 0xBC	; 188
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
					 }
					 if(k==2){
    2682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2684:	82 30       	cpi	r24, 0x02	; 2
    2686:	09 f0       	breq	.+2      	; 0x268a <home+0x128>
    2688:	88 c0       	rjmp	.+272    	; 0x279a <home+0x238>
						 HLCD_voidClearDisplay();
    268a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
						 HLCD_voidDisplayString("wait for 5 sec");
    268e:	88 ed       	ldi	r24, 0xD8	; 216
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
						 MUART_voidSendStringSyncNonBlocking("Wrong password\r\n");
    2696:	87 ee       	ldi	r24, 0xE7	; 231
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
						 HBUZZER_TurnOn(DIO_PORTA,PIN1);
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	61 e0       	ldi	r22, 0x01	; 1
    26a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <HBUZZER_TurnOn>
						 MUART_voidSendStringSyncNonBlocking("wait for 5 seconds to enter again\r\n");
    26a6:	88 ef       	ldi	r24, 0xF8	; 248
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e4       	ldi	r25, 0x40	; 64
    26b2:	ac e9       	ldi	r26, 0x9C	; 156
    26b4:	b5 e4       	ldi	r27, 0x45	; 69
    26b6:	89 8f       	std	Y+25, r24	; 0x19
    26b8:	9a 8f       	std	Y+26, r25	; 0x1a
    26ba:	ab 8f       	std	Y+27, r26	; 0x1b
    26bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26be:	69 8d       	ldd	r22, Y+25	; 0x19
    26c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	4a ef       	ldi	r20, 0xFA	; 250
    26cc:	54 e4       	ldi	r21, 0x44	; 68
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	8d 8b       	std	Y+21, r24	; 0x15
    26d8:	9e 8b       	std	Y+22, r25	; 0x16
    26da:	af 8b       	std	Y+23, r26	; 0x17
    26dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26de:	6d 89       	ldd	r22, Y+21	; 0x15
    26e0:	7e 89       	ldd	r23, Y+22	; 0x16
    26e2:	8f 89       	ldd	r24, Y+23	; 0x17
    26e4:	98 8d       	ldd	r25, Y+24	; 0x18
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e8       	ldi	r20, 0x80	; 128
    26ec:	5f e3       	ldi	r21, 0x3F	; 63
    26ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f2:	88 23       	and	r24, r24
    26f4:	2c f4       	brge	.+10     	; 0x2700 <home+0x19e>
		__ticks = 1;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	9c 8b       	std	Y+20, r25	; 0x14
    26fc:	8b 8b       	std	Y+19, r24	; 0x13
    26fe:	3f c0       	rjmp	.+126    	; 0x277e <home+0x21c>
	else if (__tmp > 65535)
    2700:	6d 89       	ldd	r22, Y+21	; 0x15
    2702:	7e 89       	ldd	r23, Y+22	; 0x16
    2704:	8f 89       	ldd	r24, Y+23	; 0x17
    2706:	98 8d       	ldd	r25, Y+24	; 0x18
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2714:	18 16       	cp	r1, r24
    2716:	4c f5       	brge	.+82     	; 0x276a <home+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2718:	69 8d       	ldd	r22, Y+25	; 0x19
    271a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    271c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    271e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e2       	ldi	r20, 0x20	; 32
    2726:	51 e4       	ldi	r21, 0x41	; 65
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9c 8b       	std	Y+20, r25	; 0x14
    273e:	8b 8b       	std	Y+19, r24	; 0x13
    2740:	0f c0       	rjmp	.+30     	; 0x2760 <home+0x1fe>
    2742:	88 ec       	ldi	r24, 0xC8	; 200
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	9a 8b       	std	Y+18, r25	; 0x12
    2748:	89 8b       	std	Y+17, r24	; 0x11
    274a:	89 89       	ldd	r24, Y+17	; 0x11
    274c:	9a 89       	ldd	r25, Y+18	; 0x12
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <home+0x1ec>
    2752:	9a 8b       	std	Y+18, r25	; 0x12
    2754:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2756:	8b 89       	ldd	r24, Y+19	; 0x13
    2758:	9c 89       	ldd	r25, Y+20	; 0x14
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	9c 8b       	std	Y+20, r25	; 0x14
    275e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2760:	8b 89       	ldd	r24, Y+19	; 0x13
    2762:	9c 89       	ldd	r25, Y+20	; 0x14
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	69 f7       	brne	.-38     	; 0x2742 <home+0x1e0>
    2768:	14 c0       	rjmp	.+40     	; 0x2792 <home+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276a:	6d 89       	ldd	r22, Y+21	; 0x15
    276c:	7e 89       	ldd	r23, Y+22	; 0x16
    276e:	8f 89       	ldd	r24, Y+23	; 0x17
    2770:	98 8d       	ldd	r25, Y+24	; 0x18
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9c 8b       	std	Y+20, r25	; 0x14
    277c:	8b 8b       	std	Y+19, r24	; 0x13
    277e:	8b 89       	ldd	r24, Y+19	; 0x13
    2780:	9c 89       	ldd	r25, Y+20	; 0x14
    2782:	98 8b       	std	Y+16, r25	; 0x10
    2784:	8f 87       	std	Y+15, r24	; 0x0f
    2786:	8f 85       	ldd	r24, Y+15	; 0x0f
    2788:	98 89       	ldd	r25, Y+16	; 0x10
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <home+0x228>
    278e:	98 8b       	std	Y+16, r25	; 0x10
    2790:	8f 87       	std	Y+15, r24	; 0x0f
						 _delay_ms(5000);
						 HBUZZER_TurnOff(DIO_PORTA,PIN1);
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	61 e0       	ldi	r22, 0x01	; 1
    2796:	0e 94 b4 05 	call	0xb68	; 0xb68 <HBUZZER_TurnOff>
				 correct_user=1;

				 HLCD_voidClearDisplay();
				 HLCD_voidDisplayString("Enter password:");
				 MUART_voidSendStringSyncNonBlocking("Enter password \r\n");
				 for (u8 k=0;k<3;k++){
    279a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    279c:	8f 5f       	subi	r24, 0xFF	; 255
    279e:	8d 8f       	std	Y+29, r24	; 0x1d
    27a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a2:	83 30       	cpi	r24, 0x03	; 3
    27a4:	08 f4       	brcc	.+2      	; 0x27a8 <home+0x246>
    27a6:	32 cf       	rjmp	.-412    	; 0x260c <home+0xaa>
			HLCD_voidClearDisplay();
			HLCD_voidDisplayString("Enter Username:");

			MUART_voidReadStringSyncBlocking(local_u8ReceivedData);

			for(u8 i=0;i<10;i++)
    27a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27aa:	8f 5f       	subi	r24, 0xFF	; 255
    27ac:	8e 8f       	std	Y+30, r24	; 0x1e
    27ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27b0:	8a 30       	cpi	r24, 0x0A	; 10
    27b2:	08 f4       	brcc	.+2      	; 0x27b6 <home+0x254>
    27b4:	fd ce       	rjmp	.-518    	; 0x25b0 <home+0x4e>
						 HBUZZER_TurnOff(DIO_PORTA,PIN1);

					 }
				 }
				}}}
	count++;}
    27b6:	8b a1       	ldd	r24, Y+35	; 0x23
    27b8:	9c a1       	ldd	r25, Y+36	; 0x24
    27ba:	ad a1       	ldd	r26, Y+37	; 0x25
    27bc:	be a1       	ldd	r27, Y+38	; 0x26
    27be:	01 96       	adiw	r24, 0x01	; 1
    27c0:	a1 1d       	adc	r26, r1
    27c2:	b1 1d       	adc	r27, r1
    27c4:	8b a3       	std	Y+35, r24	; 0x23
    27c6:	9c a3       	std	Y+36, r25	; 0x24
    27c8:	ad a3       	std	Y+37, r26	; 0x25
    27ca:	be a3       	std	Y+38, r27	; 0x26
{
	   u32 correct_user=0,count=0;
       u32 correct_password=0;


		while((correct_user==0)&&(count<3)){
    27cc:	8f a1       	ldd	r24, Y+39	; 0x27
    27ce:	98 a5       	ldd	r25, Y+40	; 0x28
    27d0:	a9 a5       	ldd	r26, Y+41	; 0x29
    27d2:	ba a5       	ldd	r27, Y+42	; 0x2a
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	a1 05       	cpc	r26, r1
    27d8:	b1 05       	cpc	r27, r1
    27da:	51 f4       	brne	.+20     	; 0x27f0 <home+0x28e>
    27dc:	8b a1       	ldd	r24, Y+35	; 0x23
    27de:	9c a1       	ldd	r25, Y+36	; 0x24
    27e0:	ad a1       	ldd	r26, Y+37	; 0x25
    27e2:	be a1       	ldd	r27, Y+38	; 0x26
    27e4:	83 30       	cpi	r24, 0x03	; 3
    27e6:	91 05       	cpc	r25, r1
    27e8:	a1 05       	cpc	r26, r1
    27ea:	b1 05       	cpc	r27, r1
    27ec:	08 f4       	brcc	.+2      	; 0x27f0 <home+0x28e>
    27ee:	d0 ce       	rjmp	.-608    	; 0x2590 <home+0x2e>

					 }
				 }
				}}}
	count++;}
			if((correct_user==0)&&(count==3)==1){
    27f0:	8f a1       	ldd	r24, Y+39	; 0x27
    27f2:	98 a5       	ldd	r25, Y+40	; 0x28
    27f4:	a9 a5       	ldd	r26, Y+41	; 0x29
    27f6:	ba a5       	ldd	r27, Y+42	; 0x2a
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	a1 05       	cpc	r26, r1
    27fc:	b1 05       	cpc	r27, r1
    27fe:	09 f0       	breq	.+2      	; 0x2802 <home+0x2a0>
    2800:	8e c0       	rjmp	.+284    	; 0x291e <home+0x3bc>
    2802:	8b a1       	ldd	r24, Y+35	; 0x23
    2804:	9c a1       	ldd	r25, Y+36	; 0x24
    2806:	ad a1       	ldd	r26, Y+37	; 0x25
    2808:	be a1       	ldd	r27, Y+38	; 0x26
    280a:	83 30       	cpi	r24, 0x03	; 3
    280c:	91 05       	cpc	r25, r1
    280e:	a1 05       	cpc	r26, r1
    2810:	b1 05       	cpc	r27, r1
    2812:	09 f0       	breq	.+2      	; 0x2816 <home+0x2b4>
    2814:	84 c0       	rjmp	.+264    	; 0x291e <home+0x3bc>
				HBUZZER_TurnOn(DIO_PORTA,PIN1);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	61 e0       	ldi	r22, 0x01	; 1
    281a:	0e 94 a3 05 	call	0xb46	; 0xb46 <HBUZZER_TurnOn>
				 HLCD_voidClearDisplay();
    281e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
				 HLCD_voidDisplayString("wait for 5 sec");
    2822:	88 ed       	ldi	r24, 0xD8	; 216
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
				MUART_voidSendStringSyncNonBlocking("wait for 5 seconds to enter again\r\n");
    282a:	88 ef       	ldi	r24, 0xF8	; 248
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e4       	ldi	r25, 0x40	; 64
    2836:	ac e9       	ldi	r26, 0x9C	; 156
    2838:	b5 e4       	ldi	r27, 0x45	; 69
    283a:	8b 87       	std	Y+11, r24	; 0x0b
    283c:	9c 87       	std	Y+12, r25	; 0x0c
    283e:	ad 87       	std	Y+13, r26	; 0x0d
    2840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2842:	6b 85       	ldd	r22, Y+11	; 0x0b
    2844:	7c 85       	ldd	r23, Y+12	; 0x0c
    2846:	8d 85       	ldd	r24, Y+13	; 0x0d
    2848:	9e 85       	ldd	r25, Y+14	; 0x0e
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	4a ef       	ldi	r20, 0xFA	; 250
    2850:	54 e4       	ldi	r21, 0x44	; 68
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8f 83       	std	Y+7, r24	; 0x07
    285c:	98 87       	std	Y+8, r25	; 0x08
    285e:	a9 87       	std	Y+9, r26	; 0x09
    2860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2862:	6f 81       	ldd	r22, Y+7	; 0x07
    2864:	78 85       	ldd	r23, Y+8	; 0x08
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e8       	ldi	r20, 0x80	; 128
    2870:	5f e3       	ldi	r21, 0x3F	; 63
    2872:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2876:	88 23       	and	r24, r24
    2878:	2c f4       	brge	.+10     	; 0x2884 <home+0x322>
		__ticks = 1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9e 83       	std	Y+6, r25	; 0x06
    2880:	8d 83       	std	Y+5, r24	; 0x05
    2882:	3f c0       	rjmp	.+126    	; 0x2902 <home+0x3a0>
	else if (__tmp > 65535)
    2884:	6f 81       	ldd	r22, Y+7	; 0x07
    2886:	78 85       	ldd	r23, Y+8	; 0x08
    2888:	89 85       	ldd	r24, Y+9	; 0x09
    288a:	9a 85       	ldd	r25, Y+10	; 0x0a
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	3f ef       	ldi	r19, 0xFF	; 255
    2890:	4f e7       	ldi	r20, 0x7F	; 127
    2892:	57 e4       	ldi	r21, 0x47	; 71
    2894:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2898:	18 16       	cp	r1, r24
    289a:	4c f5       	brge	.+82     	; 0x28ee <home+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289c:	6b 85       	ldd	r22, Y+11	; 0x0b
    289e:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e2       	ldi	r20, 0x20	; 32
    28aa:	51 e4       	ldi	r21, 0x41	; 65
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	9e 83       	std	Y+6, r25	; 0x06
    28c2:	8d 83       	std	Y+5, r24	; 0x05
    28c4:	0f c0       	rjmp	.+30     	; 0x28e4 <home+0x382>
    28c6:	88 ec       	ldi	r24, 0xC8	; 200
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	9c 83       	std	Y+4, r25	; 0x04
    28cc:	8b 83       	std	Y+3, r24	; 0x03
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	9c 81       	ldd	r25, Y+4	; 0x04
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <home+0x370>
    28d6:	9c 83       	std	Y+4, r25	; 0x04
    28d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	69 f7       	brne	.-38     	; 0x28c6 <home+0x364>
    28ec:	14 c0       	rjmp	.+40     	; 0x2916 <home+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ee:	6f 81       	ldd	r22, Y+7	; 0x07
    28f0:	78 85       	ldd	r23, Y+8	; 0x08
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
    2902:	8d 81       	ldd	r24, Y+5	; 0x05
    2904:	9e 81       	ldd	r25, Y+6	; 0x06
    2906:	9a 83       	std	Y+2, r25	; 0x02
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <home+0x3ac>
    2912:	9a 83       	std	Y+2, r25	; 0x02
    2914:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(5000);
				HBUZZER_TurnOff(DIO_PORTA,PIN1);
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	61 e0       	ldi	r22, 0x01	; 1
    291a:	0e 94 b4 05 	call	0xb68	; 0xb68 <HBUZZER_TurnOff>





    return correct_password;
    291e:	8f 8d       	ldd	r24, Y+31	; 0x1f

	}
    2920:	aa 96       	adiw	r28, 0x2a	; 42
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <control>:
void control(){
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	62 97       	sbiw	r28, 0x12	; 18
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61

	u8 select=0;
    2946:	18 8a       	std	Y+16, r1	; 0x10
    2948:	bd c0       	rjmp	.+378    	; 0x2ac4 <control+0x192>
   while(select==0){
	HLCD_voidClearDisplay();
    294a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
	HLCD_voidDisplayString("L:LED    D:DOOR");
    294e:	8c e1       	ldi	r24, 0x1C	; 28
    2950:	91 e0       	ldi	r25, 0x01	; 1
    2952:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
	HLCD_voidGoToPos (LCD_ROW2, LCD_COL1);
    2956:	82 e0       	ldi	r24, 0x02	; 2
    2958:	61 e0       	ldi	r22, 0x01	; 1
    295a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <HLCD_voidGoToPos>
	HLCD_voidDisplayString("F:FAN    S:EXIT");
    295e:	8c e2       	ldi	r24, 0x2C	; 44
    2960:	91 e0       	ldi	r25, 0x01	; 1
    2962:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
	MUART_voidSendStringSyncNonBlocking("To control LED      Enter(L)\r\n"
    2966:	8c e3       	ldi	r24, 0x3C	; 60
    2968:	91 e0       	ldi	r25, 0x01	; 1
    296a:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
						                 "To control DOOR     Enter(D)\r\n"
						                 "To control FAN      Enter(F)\r\n"
						                 "To Exit             Enter(S)\r\n");
	u8 choose=MUART_u8ReadByteSyncBlocking ();
    296e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <MUART_u8ReadByteSyncBlocking>
    2972:	8f 87       	std	Y+15, r24	; 0x0f

	 switch(choose){
    2974:	8f 85       	ldd	r24, Y+15	; 0x0f
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	3a 8b       	std	Y+18, r19	; 0x12
    297c:	29 8b       	std	Y+17, r18	; 0x11
    297e:	89 89       	ldd	r24, Y+17	; 0x11
    2980:	9a 89       	ldd	r25, Y+18	; 0x12
    2982:	86 34       	cpi	r24, 0x46	; 70
    2984:	91 05       	cpc	r25, r1
    2986:	e1 f0       	breq	.+56     	; 0x29c0 <control+0x8e>
    2988:	29 89       	ldd	r18, Y+17	; 0x11
    298a:	3a 89       	ldd	r19, Y+18	; 0x12
    298c:	27 34       	cpi	r18, 0x47	; 71
    298e:	31 05       	cpc	r19, r1
    2990:	34 f4       	brge	.+12     	; 0x299e <control+0x6c>
    2992:	89 89       	ldd	r24, Y+17	; 0x11
    2994:	9a 89       	ldd	r25, Y+18	; 0x12
    2996:	84 34       	cpi	r24, 0x44	; 68
    2998:	91 05       	cpc	r25, r1
    299a:	79 f0       	breq	.+30     	; 0x29ba <control+0x88>
    299c:	17 c0       	rjmp	.+46     	; 0x29cc <control+0x9a>
    299e:	29 89       	ldd	r18, Y+17	; 0x11
    29a0:	3a 89       	ldd	r19, Y+18	; 0x12
    29a2:	2c 34       	cpi	r18, 0x4C	; 76
    29a4:	31 05       	cpc	r19, r1
    29a6:	31 f0       	breq	.+12     	; 0x29b4 <control+0x82>
    29a8:	89 89       	ldd	r24, Y+17	; 0x11
    29aa:	9a 89       	ldd	r25, Y+18	; 0x12
    29ac:	83 35       	cpi	r24, 0x53	; 83
    29ae:	91 05       	cpc	r25, r1
    29b0:	51 f0       	breq	.+20     	; 0x29c6 <control+0x94>
    29b2:	0c c0       	rjmp	.+24     	; 0x29cc <control+0x9a>
				 case'L':
					LED(); break;
    29b4:	0e 94 6f 15 	call	0x2ade	; 0x2ade <LED>
    29b8:	85 c0       	rjmp	.+266    	; 0x2ac4 <control+0x192>
				 case'D':
					 DOOR(); break;
    29ba:	0e 94 23 17 	call	0x2e46	; 0x2e46 <DOOR>
    29be:	82 c0       	rjmp	.+260    	; 0x2ac4 <control+0x192>
				 case'F':
					 FAN();  break;
    29c0:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <FAN>
    29c4:	7f c0       	rjmp	.+254    	; 0x2ac4 <control+0x192>

	case 'S': select=1;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	88 8b       	std	Y+16, r24	; 0x10
    29ca:	7c c0       	rjmp	.+248    	; 0x2ac4 <control+0x192>
				break;
	default:
	 HLCD_voidClearDisplay();
    29cc:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
	 HLCD_voidDisplayString("WRONG");
    29d0:	85 eb       	ldi	r24, 0xB5	; 181
    29d2:	91 e0       	ldi	r25, 0x01	; 1
    29d4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
	 MUART_voidSendStringSyncNonBlocking("WRONG\r\n");
    29d8:	8b eb       	ldi	r24, 0xBB	; 187
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a8 e4       	ldi	r26, 0x48	; 72
    29e6:	b3 e4       	ldi	r27, 0x43	; 67
    29e8:	8b 87       	std	Y+11, r24	; 0x0b
    29ea:	9c 87       	std	Y+12, r25	; 0x0c
    29ec:	ad 87       	std	Y+13, r26	; 0x0d
    29ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	4a ef       	ldi	r20, 0xFA	; 250
    29fe:	54 e4       	ldi	r21, 0x44	; 68
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	8f 83       	std	Y+7, r24	; 0x07
    2a0a:	98 87       	std	Y+8, r25	; 0x08
    2a0c:	a9 87       	std	Y+9, r26	; 0x09
    2a0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a10:	6f 81       	ldd	r22, Y+7	; 0x07
    2a12:	78 85       	ldd	r23, Y+8	; 0x08
    2a14:	89 85       	ldd	r24, Y+9	; 0x09
    2a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <control+0x100>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <control+0x17e>
	else if (__tmp > 65535)
    2a32:	6f 81       	ldd	r22, Y+7	; 0x07
    2a34:	78 85       	ldd	r23, Y+8	; 0x08
    2a36:	89 85       	ldd	r24, Y+9	; 0x09
    2a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	4c f5       	brge	.+82     	; 0x2a9c <control+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9e 83       	std	Y+6, r25	; 0x06
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <control+0x160>
    2a74:	88 ec       	ldi	r24, 0xC8	; 200
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9c 83       	std	Y+4, r25	; 0x04
    2a7a:	8b 83       	std	Y+3, r24	; 0x03
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <control+0x14e>
    2a84:	9c 83       	std	Y+4, r25	; 0x04
    2a86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	8d 81       	ldd	r24, Y+5	; 0x05
    2a94:	9e 81       	ldd	r25, Y+6	; 0x06
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <control+0x142>
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <control+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9e:	78 85       	ldd	r23, Y+8	; 0x08
    2aa0:	89 85       	ldd	r24, Y+9	; 0x09
    2aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	9e 83       	std	Y+6, r25	; 0x06
    2aae:	8d 83       	std	Y+5, r24	; 0x05
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab4:	9a 83       	std	Y+2, r25	; 0x02
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <control+0x18a>
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01

	}
void control(){

	u8 select=0;
   while(select==0){
    2ac4:	88 89       	ldd	r24, Y+16	; 0x10
    2ac6:	88 23       	and	r24, r24
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <control+0x19a>
    2aca:	3f cf       	rjmp	.-386    	; 0x294a <control+0x18>
	 MUART_voidSendStringSyncNonBlocking("WRONG\r\n");
	_delay_ms(200);
				 break;
				 }

				}}
    2acc:	62 96       	adiw	r28, 0x12	; 18
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <LED>:

void LED(){
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	62 97       	sbiw	r28, 0x12	; 18
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
	u8 select_1=0;
    2af2:	18 8a       	std	Y+16, r1	; 0x10
    2af4:	b3 c0       	rjmp	.+358    	; 0x2c5c <LED+0x17e>
	while(select_1==0){
	 HLCD_voidClearDisplay();
    2af6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
	 HLCD_voidDisplayString("O:ON     F:OFF");
    2afa:	83 ec       	ldi	r24, 0xC3	; 195
    2afc:	91 e0       	ldi	r25, 0x01	; 1
    2afe:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
	 HLCD_voidGoToPos (LCD_ROW2, LCD_COL1);
    2b02:	82 e0       	ldi	r24, 0x02	; 2
    2b04:	61 e0       	ldi	r22, 0x01	; 1
    2b06:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <HLCD_voidGoToPos>
	 HLCD_voidDisplayString("S:EXIT");
    2b0a:	82 ed       	ldi	r24, 0xD2	; 210
    2b0c:	91 e0       	ldi	r25, 0x01	; 1
    2b0e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
	 MUART_voidSendStringSyncNonBlocking("To TURN LED ON      Enter(O)\r\n"
    2b12:	89 ed       	ldi	r24, 0xD9	; 217
    2b14:	91 e0       	ldi	r25, 0x01	; 1
    2b16:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
							             "To TURN LED OFF     Enter(F)\r\n"
			                             "To Exit             Enter(S)\r\n"
							             );
	         u8 choose_2= MUART_u8ReadByteSyncBlocking();
    2b1a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <MUART_u8ReadByteSyncBlocking>
    2b1e:	8f 87       	std	Y+15, r24	; 0x0f
	         switch(choose_2)
    2b20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b22:	28 2f       	mov	r18, r24
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	3a 8b       	std	Y+18, r19	; 0x12
    2b28:	29 8b       	std	Y+17, r18	; 0x11
    2b2a:	89 89       	ldd	r24, Y+17	; 0x11
    2b2c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b2e:	8f 34       	cpi	r24, 0x4F	; 79
    2b30:	91 05       	cpc	r25, r1
    2b32:	59 f0       	breq	.+22     	; 0x2b4a <LED+0x6c>
    2b34:	29 89       	ldd	r18, Y+17	; 0x11
    2b36:	3a 89       	ldd	r19, Y+18	; 0x12
    2b38:	23 35       	cpi	r18, 0x53	; 83
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	81 f0       	breq	.+32     	; 0x2b5e <LED+0x80>
    2b3e:	89 89       	ldd	r24, Y+17	; 0x11
    2b40:	9a 89       	ldd	r25, Y+18	; 0x12
    2b42:	86 34       	cpi	r24, 0x46	; 70
    2b44:	91 05       	cpc	r25, r1
    2b46:	31 f0       	breq	.+12     	; 0x2b54 <LED+0x76>
    2b48:	0d c0       	rjmp	.+26     	; 0x2b64 <LED+0x86>
	            {
	              case 'O':HLED_voidTurnOn(DIO_PORTA, PIN0);
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <HLED_voidTurnOn>
    2b52:	84 c0       	rjmp	.+264    	; 0x2c5c <LED+0x17e>
                     break;
	              case'F':HLED_voidTurnOff(DIO_PORTA, PIN0);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <HLED_voidTurnOff>
    2b5c:	7f c0       	rjmp	.+254    	; 0x2c5c <LED+0x17e>
                     break;
	              case 'S': select_1=1;
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	88 8b       	std	Y+16, r24	; 0x10
    2b62:	7c c0       	rjmp	.+248    	; 0x2c5c <LED+0x17e>
	             		break;

	              default:
	            	  HLCD_voidClearDisplay();
    2b64:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
	            	  HLCD_voidDisplayString("WRONG");
    2b68:	85 eb       	ldi	r24, 0xB5	; 181
    2b6a:	91 e0       	ldi	r25, 0x01	; 1
    2b6c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
	            	  MUART_voidSendStringSyncNonBlocking("WRONG\r\n");
    2b70:	8b eb       	ldi	r24, 0xBB	; 187
    2b72:	91 e0       	ldi	r25, 0x01	; 1
    2b74:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a8 e4       	ldi	r26, 0x48	; 72
    2b7e:	b3 e4       	ldi	r27, 0x43	; 67
    2b80:	8b 87       	std	Y+11, r24	; 0x0b
    2b82:	9c 87       	std	Y+12, r25	; 0x0c
    2b84:	ad 87       	std	Y+13, r26	; 0x0d
    2b86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	4a ef       	ldi	r20, 0xFA	; 250
    2b96:	54 e4       	ldi	r21, 0x44	; 68
    2b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	8f 83       	std	Y+7, r24	; 0x07
    2ba2:	98 87       	std	Y+8, r25	; 0x08
    2ba4:	a9 87       	std	Y+9, r26	; 0x09
    2ba6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    2baa:	78 85       	ldd	r23, Y+8	; 0x08
    2bac:	89 85       	ldd	r24, Y+9	; 0x09
    2bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bbc:	88 23       	and	r24, r24
    2bbe:	2c f4       	brge	.+10     	; 0x2bca <LED+0xec>
		__ticks = 1;
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	9e 83       	std	Y+6, r25	; 0x06
    2bc6:	8d 83       	std	Y+5, r24	; 0x05
    2bc8:	3f c0       	rjmp	.+126    	; 0x2c48 <LED+0x16a>
	else if (__tmp > 65535)
    2bca:	6f 81       	ldd	r22, Y+7	; 0x07
    2bcc:	78 85       	ldd	r23, Y+8	; 0x08
    2bce:	89 85       	ldd	r24, Y+9	; 0x09
    2bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	3f ef       	ldi	r19, 0xFF	; 255
    2bd6:	4f e7       	ldi	r20, 0x7F	; 127
    2bd8:	57 e4       	ldi	r21, 0x47	; 71
    2bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bde:	18 16       	cp	r1, r24
    2be0:	4c f5       	brge	.+82     	; 0x2c34 <LED+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e2       	ldi	r20, 0x20	; 32
    2bf0:	51 e4       	ldi	r21, 0x41	; 65
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	0f c0       	rjmp	.+30     	; 0x2c2a <LED+0x14c>
    2c0c:	88 ec       	ldi	r24, 0xC8	; 200
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	9c 83       	std	Y+4, r25	; 0x04
    2c12:	8b 83       	std	Y+3, r24	; 0x03
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	9c 81       	ldd	r25, Y+4	; 0x04
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <LED+0x13a>
    2c1c:	9c 83       	std	Y+4, r25	; 0x04
    2c1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c20:	8d 81       	ldd	r24, Y+5	; 0x05
    2c22:	9e 81       	ldd	r25, Y+6	; 0x06
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	69 f7       	brne	.-38     	; 0x2c0c <LED+0x12e>
    2c32:	14 c0       	rjmp	.+40     	; 0x2c5c <LED+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c34:	6f 81       	ldd	r22, Y+7	; 0x07
    2c36:	78 85       	ldd	r23, Y+8	; 0x08
    2c38:	89 85       	ldd	r24, Y+9	; 0x09
    2c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9e 83       	std	Y+6, r25	; 0x06
    2c46:	8d 83       	std	Y+5, r24	; 0x05
    2c48:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4c:	9a 83       	std	Y+2, r25	; 0x02
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	9a 81       	ldd	r25, Y+2	; 0x02
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <LED+0x176>
    2c58:	9a 83       	std	Y+2, r25	; 0x02
    2c5a:	89 83       	std	Y+1, r24	; 0x01

				}}

void LED(){
	u8 select_1=0;
	while(select_1==0){
    2c5c:	88 89       	ldd	r24, Y+16	; 0x10
    2c5e:	88 23       	and	r24, r24
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <LED+0x186>
    2c62:	49 cf       	rjmp	.-366    	; 0x2af6 <LED+0x18>
	            	  _delay_ms(200);
	            	  break;

	            }}

}
    2c64:	62 96       	adiw	r28, 0x12	; 18
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <FAN>:
void FAN(){
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	62 97       	sbiw	r28, 0x12	; 18
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
	u8 select_1=0;
    2c8a:	18 8a       	std	Y+16, r1	; 0x10
    2c8c:	cf c0       	rjmp	.+414    	; 0x2e2c <FAN+0x1b6>
	while(select_1==0){
	 HLCD_voidClearDisplay();
    2c8e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
	 HLCD_voidDisplayString("ON O:1 T:2 H:3");
    2c92:	84 e3       	ldi	r24, 0x34	; 52
    2c94:	92 e0       	ldi	r25, 0x02	; 2
    2c96:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
	 HLCD_voidGoToPos (LCD_ROW2, LCD_COL1);
    2c9a:	82 e0       	ldi	r24, 0x02	; 2
    2c9c:	61 e0       	ldi	r22, 0x01	; 1
    2c9e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <HLCD_voidGoToPos>
	 HLCD_voidDisplayString("F:OFF   S:EXIT");
    2ca2:	83 e4       	ldi	r24, 0x43	; 67
    2ca4:	92 e0       	ldi	r25, 0x02	; 2
    2ca6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>

	 MUART_voidSendStringSyncNonBlocking("To TURN FAN OFF             Enter(F)\r\n"
    2caa:	82 e5       	ldi	r24, 0x52	; 82
    2cac:	92 e0       	ldi	r25, 0x02	; 2
    2cae:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
			                             "To TURN FAN ON DEGREE 2     Enter(T)\r\n"
			                             "To TURN FAN ON DEGREE 3     Enter(H)\r\n"
			                             "To Exit                     Enter(S)\r\n"
										 );

	       u8 choose_4= MUART_u8ReadByteSyncBlocking();
    2cb2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <MUART_u8ReadByteSyncBlocking>
    2cb6:	8f 87       	std	Y+15, r24	; 0x0f
			 switch(choose_4)
    2cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	3a 8b       	std	Y+18, r19	; 0x12
    2cc0:	29 8b       	std	Y+17, r18	; 0x11
    2cc2:	89 89       	ldd	r24, Y+17	; 0x11
    2cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc6:	8f 34       	cpi	r24, 0x4F	; 79
    2cc8:	91 05       	cpc	r25, r1
    2cca:	f9 f0       	breq	.+62     	; 0x2d0a <FAN+0x94>
    2ccc:	29 89       	ldd	r18, Y+17	; 0x11
    2cce:	3a 89       	ldd	r19, Y+18	; 0x12
    2cd0:	20 35       	cpi	r18, 0x50	; 80
    2cd2:	31 05       	cpc	r19, r1
    2cd4:	5c f4       	brge	.+22     	; 0x2cec <FAN+0x76>
    2cd6:	89 89       	ldd	r24, Y+17	; 0x11
    2cd8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cda:	86 34       	cpi	r24, 0x46	; 70
    2cdc:	91 05       	cpc	r25, r1
    2cde:	89 f0       	breq	.+34     	; 0x2d02 <FAN+0x8c>
    2ce0:	29 89       	ldd	r18, Y+17	; 0x11
    2ce2:	3a 89       	ldd	r19, Y+18	; 0x12
    2ce4:	28 34       	cpi	r18, 0x48	; 72
    2ce6:	31 05       	cpc	r19, r1
    2ce8:	e1 f0       	breq	.+56     	; 0x2d22 <FAN+0xac>
    2cea:	24 c0       	rjmp	.+72     	; 0x2d34 <FAN+0xbe>
    2cec:	89 89       	ldd	r24, Y+17	; 0x11
    2cee:	9a 89       	ldd	r25, Y+18	; 0x12
    2cf0:	83 35       	cpi	r24, 0x53	; 83
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	e1 f0       	breq	.+56     	; 0x2d2e <FAN+0xb8>
    2cf6:	29 89       	ldd	r18, Y+17	; 0x11
    2cf8:	3a 89       	ldd	r19, Y+18	; 0x12
    2cfa:	24 35       	cpi	r18, 0x54	; 84
    2cfc:	31 05       	cpc	r19, r1
    2cfe:	59 f0       	breq	.+22     	; 0x2d16 <FAN+0xa0>
    2d00:	19 c0       	rjmp	.+50     	; 0x2d34 <FAN+0xbe>
			 {
				 case 'F':
					 MTIMER0_voidSetOCR0Value(0);
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <MTIMER0_voidSetOCR0Value>
    2d08:	91 c0       	rjmp	.+290    	; 0x2e2c <FAN+0x1b6>

					 break;
				 case'O': MTIMER0_voidInit ();
    2d0a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <MTIMER0_voidInit>
					     MTIMER0_voidSetOCR0Value(102);
    2d0e:	86 e6       	ldi	r24, 0x66	; 102
    2d10:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <MTIMER0_voidSetOCR0Value>
    2d14:	8b c0       	rjmp	.+278    	; 0x2e2c <FAN+0x1b6>
					 break;
				 case'T':MTIMER0_voidInit ();
    2d16:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <MTIMER0_voidInit>
					     MTIMER0_voidSetOCR0Value(178);
    2d1a:	82 eb       	ldi	r24, 0xB2	; 178
    2d1c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <MTIMER0_voidSetOCR0Value>
    2d20:	85 c0       	rjmp	.+266    	; 0x2e2c <FAN+0x1b6>
					 break;
				 case'H':MTIMER0_voidInit ();
    2d22:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <MTIMER0_voidInit>
					     MTIMER0_voidSetOCR0Value(250);
    2d26:	8a ef       	ldi	r24, 0xFA	; 250
    2d28:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <MTIMER0_voidSetOCR0Value>
    2d2c:	7f c0       	rjmp	.+254    	; 0x2e2c <FAN+0x1b6>
					 break;
				 case 'S': select_1=1;
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	88 8b       	std	Y+16, r24	; 0x10
    2d32:	7c c0       	rjmp	.+248    	; 0x2e2c <FAN+0x1b6>
						break;
				 default:
					 HLCD_voidClearDisplay();
    2d34:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
					 HLCD_voidDisplayString("WRONG");
    2d38:	85 eb       	ldi	r24, 0xB5	; 181
    2d3a:	91 e0       	ldi	r25, 0x01	; 1
    2d3c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
					 MUART_voidSendStringSyncNonBlocking("WRONG\r\n");
    2d40:	8b eb       	ldi	r24, 0xBB	; 187
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	a8 e4       	ldi	r26, 0x48	; 72
    2d4e:	b3 e4       	ldi	r27, 0x43	; 67
    2d50:	8b 87       	std	Y+11, r24	; 0x0b
    2d52:	9c 87       	std	Y+12, r25	; 0x0c
    2d54:	ad 87       	std	Y+13, r26	; 0x0d
    2d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	4a ef       	ldi	r20, 0xFA	; 250
    2d66:	54 e4       	ldi	r21, 0x44	; 68
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	8f 83       	std	Y+7, r24	; 0x07
    2d72:	98 87       	std	Y+8, r25	; 0x08
    2d74:	a9 87       	std	Y+9, r26	; 0x09
    2d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d78:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7a:	78 85       	ldd	r23, Y+8	; 0x08
    2d7c:	89 85       	ldd	r24, Y+9	; 0x09
    2d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e8       	ldi	r20, 0x80	; 128
    2d86:	5f e3       	ldi	r21, 0x3F	; 63
    2d88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8c:	88 23       	and	r24, r24
    2d8e:	2c f4       	brge	.+10     	; 0x2d9a <FAN+0x124>
		__ticks = 1;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	9e 83       	std	Y+6, r25	; 0x06
    2d96:	8d 83       	std	Y+5, r24	; 0x05
    2d98:	3f c0       	rjmp	.+126    	; 0x2e18 <FAN+0x1a2>
	else if (__tmp > 65535)
    2d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9c:	78 85       	ldd	r23, Y+8	; 0x08
    2d9e:	89 85       	ldd	r24, Y+9	; 0x09
    2da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	3f ef       	ldi	r19, 0xFF	; 255
    2da6:	4f e7       	ldi	r20, 0x7F	; 127
    2da8:	57 e4       	ldi	r21, 0x47	; 71
    2daa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dae:	18 16       	cp	r1, r24
    2db0:	4c f5       	brge	.+82     	; 0x2e04 <FAN+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e2       	ldi	r20, 0x20	; 32
    2dc0:	51 e4       	ldi	r21, 0x41	; 65
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
    2dda:	0f c0       	rjmp	.+30     	; 0x2dfa <FAN+0x184>
    2ddc:	88 ec       	ldi	r24, 0xC8	; 200
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	9c 83       	std	Y+4, r25	; 0x04
    2de2:	8b 83       	std	Y+3, r24	; 0x03
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <FAN+0x172>
    2dec:	9c 83       	std	Y+4, r25	; 0x04
    2dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df0:	8d 81       	ldd	r24, Y+5	; 0x05
    2df2:	9e 81       	ldd	r25, Y+6	; 0x06
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	69 f7       	brne	.-38     	; 0x2ddc <FAN+0x166>
    2e02:	14 c0       	rjmp	.+40     	; 0x2e2c <FAN+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e04:	6f 81       	ldd	r22, Y+7	; 0x07
    2e06:	78 85       	ldd	r23, Y+8	; 0x08
    2e08:	89 85       	ldd	r24, Y+9	; 0x09
    2e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	9a 83       	std	Y+2, r25	; 0x02
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <FAN+0x1ae>
    2e28:	9a 83       	std	Y+2, r25	; 0x02
    2e2a:	89 83       	std	Y+1, r24	; 0x01
	            }}

}
void FAN(){
	u8 select_1=0;
	while(select_1==0){
    2e2c:	88 89       	ldd	r24, Y+16	; 0x10
    2e2e:	88 23       	and	r24, r24
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <FAN+0x1be>
    2e32:	2d cf       	rjmp	.-422    	; 0x2c8e <FAN+0x18>
					 break;

								 }}


}
    2e34:	62 96       	adiw	r28, 0x12	; 18
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <DOOR>:
void DOOR(){
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	62 97       	sbiw	r28, 0x12	; 18
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
	u8 select_1=0;
    2e5a:	18 8a       	std	Y+16, r1	; 0x10
    2e5c:	b7 c0       	rjmp	.+366    	; 0x2fcc <DOOR+0x186>
	while(select_1==0){
	 HLCD_voidClearDisplay();
    2e5e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
	 HLCD_voidDisplayString("O:ON     F:OFF");
    2e62:	83 ec       	ldi	r24, 0xC3	; 195
    2e64:	91 e0       	ldi	r25, 0x01	; 1
    2e66:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
	 HLCD_voidGoToPos (LCD_ROW2, LCD_COL1);
    2e6a:	82 e0       	ldi	r24, 0x02	; 2
    2e6c:	61 e0       	ldi	r22, 0x01	; 1
    2e6e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <HLCD_voidGoToPos>
	 HLCD_voidDisplayString("S:EXIT");
    2e72:	82 ed       	ldi	r24, 0xD2	; 210
    2e74:	91 e0       	ldi	r25, 0x01	; 1
    2e76:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
	 MUART_voidSendStringSyncNonBlocking("To TURN DOOR ON      Enter(O)\r\n"
    2e7a:	81 e1       	ldi	r24, 0x11	; 17
    2e7c:	93 e0       	ldi	r25, 0x03	; 3
    2e7e:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
										 "To TURN DOOR OFF     Enter(F)\r\n"
			                             "To Exit              Enter(S)\r\n"
										  );
           u8 choose_3= MUART_u8ReadByteSyncBlocking();
    2e82:	0e 94 6e 11 	call	0x22dc	; 0x22dc <MUART_u8ReadByteSyncBlocking>
    2e86:	8f 87       	std	Y+15, r24	; 0x0f
			 switch(choose_3)
    2e88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	3a 8b       	std	Y+18, r19	; 0x12
    2e90:	29 8b       	std	Y+17, r18	; 0x11
    2e92:	89 89       	ldd	r24, Y+17	; 0x11
    2e94:	9a 89       	ldd	r25, Y+18	; 0x12
    2e96:	8f 34       	cpi	r24, 0x4F	; 79
    2e98:	91 05       	cpc	r25, r1
    2e9a:	59 f0       	breq	.+22     	; 0x2eb2 <DOOR+0x6c>
    2e9c:	29 89       	ldd	r18, Y+17	; 0x11
    2e9e:	3a 89       	ldd	r19, Y+18	; 0x12
    2ea0:	23 35       	cpi	r18, 0x53	; 83
    2ea2:	31 05       	cpc	r19, r1
    2ea4:	a1 f0       	breq	.+40     	; 0x2ece <DOOR+0x88>
    2ea6:	89 89       	ldd	r24, Y+17	; 0x11
    2ea8:	9a 89       	ldd	r25, Y+18	; 0x12
    2eaa:	86 34       	cpi	r24, 0x46	; 70
    2eac:	91 05       	cpc	r25, r1
    2eae:	41 f0       	breq	.+16     	; 0x2ec0 <DOOR+0x7a>
    2eb0:	11 c0       	rjmp	.+34     	; 0x2ed4 <DOOR+0x8e>
		     {
				 case 'O':HRELAY_voidTurnOn(DIO_PORTA, PIN2);
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	62 e0       	ldi	r22, 0x02	; 2
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <HRELAY_voidTurnOn>
    2ebe:	86 c0       	rjmp	.+268    	; 0x2fcc <DOOR+0x186>
					  break;
				 case'F':HRELAY_voidTurnOff(DIO_PORTA, PIN2);
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	62 e0       	ldi	r22, 0x02	; 2
    2ec6:	70 e0       	ldi	r23, 0x00	; 0
    2ec8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <HRELAY_voidTurnOff>
    2ecc:	7f c0       	rjmp	.+254    	; 0x2fcc <DOOR+0x186>
					  break;
				 case 'S': select_1=1;
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	88 8b       	std	Y+16, r24	; 0x10
    2ed2:	7c c0       	rjmp	.+248    	; 0x2fcc <DOOR+0x186>
				  break;

				 default:
					 HLCD_voidClearDisplay();
    2ed4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <HLCD_voidClearDisplay>
					 HLCD_voidDisplayString("WRONG");
    2ed8:	85 eb       	ldi	r24, 0xB5	; 181
    2eda:	91 e0       	ldi	r25, 0x01	; 1
    2edc:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidDisplayString>
					 MUART_voidSendStringSyncNonBlocking("WRONG\r\n");
    2ee0:	8b eb       	ldi	r24, 0xBB	; 187
    2ee2:	91 e0       	ldi	r25, 0x01	; 1
    2ee4:	0e 94 37 11 	call	0x226e	; 0x226e <MUART_voidSendStringSyncNonBlocking>
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	a8 e4       	ldi	r26, 0x48	; 72
    2eee:	b3 e4       	ldi	r27, 0x43	; 67
    2ef0:	8b 87       	std	Y+11, r24	; 0x0b
    2ef2:	9c 87       	std	Y+12, r25	; 0x0c
    2ef4:	ad 87       	std	Y+13, r26	; 0x0d
    2ef6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2efa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2efc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	4a ef       	ldi	r20, 0xFA	; 250
    2f06:	54 e4       	ldi	r21, 0x44	; 68
    2f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	8f 83       	std	Y+7, r24	; 0x07
    2f12:	98 87       	std	Y+8, r25	; 0x08
    2f14:	a9 87       	std	Y+9, r26	; 0x09
    2f16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f18:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1a:	78 85       	ldd	r23, Y+8	; 0x08
    2f1c:	89 85       	ldd	r24, Y+9	; 0x09
    2f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	40 e8       	ldi	r20, 0x80	; 128
    2f26:	5f e3       	ldi	r21, 0x3F	; 63
    2f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2c:	88 23       	and	r24, r24
    2f2e:	2c f4       	brge	.+10     	; 0x2f3a <DOOR+0xf4>
		__ticks = 1;
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9e 83       	std	Y+6, r25	; 0x06
    2f36:	8d 83       	std	Y+5, r24	; 0x05
    2f38:	3f c0       	rjmp	.+126    	; 0x2fb8 <DOOR+0x172>
	else if (__tmp > 65535)
    2f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3c:	78 85       	ldd	r23, Y+8	; 0x08
    2f3e:	89 85       	ldd	r24, Y+9	; 0x09
    2f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	3f ef       	ldi	r19, 0xFF	; 255
    2f46:	4f e7       	ldi	r20, 0x7F	; 127
    2f48:	57 e4       	ldi	r21, 0x47	; 71
    2f4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f4e:	18 16       	cp	r1, r24
    2f50:	4c f5       	brge	.+82     	; 0x2fa4 <DOOR+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e2       	ldi	r20, 0x20	; 32
    2f60:	51 e4       	ldi	r21, 0x41	; 65
    2f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	bc 01       	movw	r22, r24
    2f6c:	cd 01       	movw	r24, r26
    2f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	9e 83       	std	Y+6, r25	; 0x06
    2f78:	8d 83       	std	Y+5, r24	; 0x05
    2f7a:	0f c0       	rjmp	.+30     	; 0x2f9a <DOOR+0x154>
    2f7c:	88 ec       	ldi	r24, 0xC8	; 200
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	9c 83       	std	Y+4, r25	; 0x04
    2f82:	8b 83       	std	Y+3, r24	; 0x03
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	9c 81       	ldd	r25, Y+4	; 0x04
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	f1 f7       	brne	.-4      	; 0x2f88 <DOOR+0x142>
    2f8c:	9c 83       	std	Y+4, r25	; 0x04
    2f8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f90:	8d 81       	ldd	r24, Y+5	; 0x05
    2f92:	9e 81       	ldd	r25, Y+6	; 0x06
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	9e 83       	std	Y+6, r25	; 0x06
    2f98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	69 f7       	brne	.-38     	; 0x2f7c <DOOR+0x136>
    2fa2:	14 c0       	rjmp	.+40     	; 0x2fcc <DOOR+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa6:	78 85       	ldd	r23, Y+8	; 0x08
    2fa8:	89 85       	ldd	r24, Y+9	; 0x09
    2faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	9e 83       	std	Y+6, r25	; 0x06
    2fb6:	8d 83       	std	Y+5, r24	; 0x05
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbc:	9a 83       	std	Y+2, r25	; 0x02
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <DOOR+0x17e>
    2fc8:	9a 83       	std	Y+2, r25	; 0x02
    2fca:	89 83       	std	Y+1, r24	; 0x01


}
void DOOR(){
	u8 select_1=0;
	while(select_1==0){
    2fcc:	88 89       	ldd	r24, Y+16	; 0x10
    2fce:	88 23       	and	r24, r24
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <DOOR+0x18e>
    2fd2:	45 cf       	rjmp	.-374    	; 0x2e5e <DOOR+0x18>
					 _delay_ms(200);
					   break;

			 }}

}
    2fd4:	62 96       	adiw	r28, 0x12	; 18
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	08 95       	ret

00002fe6 <main>:
#include <string.h>
#include <util/delay.h>

#define F_CPU 8000000UL

int main(){
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	0f 92       	push	r0
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
	 MDIO_voidInit();
    2ff0:	0e 94 99 09 	call	0x1332	; 0x1332 <MDIO_voidInit>
	 MUART_voidInit();
    2ff4:	0e 94 61 10 	call	0x20c2	; 0x20c2 <MUART_voidInit>
	 HLCD_voidInit();
    2ff8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <HLCD_voidInit>
	 while(1){
		 u8 login=0;
    2ffc:	19 82       	std	Y+1, r1	; 0x01
		login=home();
    2ffe:	0e 94 b1 12 	call	0x2562	; 0x2562 <home>
    3002:	89 83       	std	Y+1, r24	; 0x01
		 if(login==1){
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	81 30       	cpi	r24, 0x01	; 1
    3008:	c9 f7       	brne	.-14     	; 0x2ffc <main+0x16>
			 control(); }
    300a:	0e 94 99 14 	call	0x2932	; 0x2932 <control>
    300e:	f6 cf       	rjmp	.-20     	; 0x2ffc <main+0x16>

00003010 <__mulsi3>:
    3010:	62 9f       	mul	r22, r18
    3012:	d0 01       	movw	r26, r0
    3014:	73 9f       	mul	r23, r19
    3016:	f0 01       	movw	r30, r0
    3018:	82 9f       	mul	r24, r18
    301a:	e0 0d       	add	r30, r0
    301c:	f1 1d       	adc	r31, r1
    301e:	64 9f       	mul	r22, r20
    3020:	e0 0d       	add	r30, r0
    3022:	f1 1d       	adc	r31, r1
    3024:	92 9f       	mul	r25, r18
    3026:	f0 0d       	add	r31, r0
    3028:	83 9f       	mul	r24, r19
    302a:	f0 0d       	add	r31, r0
    302c:	74 9f       	mul	r23, r20
    302e:	f0 0d       	add	r31, r0
    3030:	65 9f       	mul	r22, r21
    3032:	f0 0d       	add	r31, r0
    3034:	99 27       	eor	r25, r25
    3036:	72 9f       	mul	r23, r18
    3038:	b0 0d       	add	r27, r0
    303a:	e1 1d       	adc	r30, r1
    303c:	f9 1f       	adc	r31, r25
    303e:	63 9f       	mul	r22, r19
    3040:	b0 0d       	add	r27, r0
    3042:	e1 1d       	adc	r30, r1
    3044:	f9 1f       	adc	r31, r25
    3046:	bd 01       	movw	r22, r26
    3048:	cf 01       	movw	r24, r30
    304a:	11 24       	eor	r1, r1
    304c:	08 95       	ret

0000304e <__udivmodsi4>:
    304e:	a1 e2       	ldi	r26, 0x21	; 33
    3050:	1a 2e       	mov	r1, r26
    3052:	aa 1b       	sub	r26, r26
    3054:	bb 1b       	sub	r27, r27
    3056:	fd 01       	movw	r30, r26
    3058:	0d c0       	rjmp	.+26     	; 0x3074 <__udivmodsi4_ep>

0000305a <__udivmodsi4_loop>:
    305a:	aa 1f       	adc	r26, r26
    305c:	bb 1f       	adc	r27, r27
    305e:	ee 1f       	adc	r30, r30
    3060:	ff 1f       	adc	r31, r31
    3062:	a2 17       	cp	r26, r18
    3064:	b3 07       	cpc	r27, r19
    3066:	e4 07       	cpc	r30, r20
    3068:	f5 07       	cpc	r31, r21
    306a:	20 f0       	brcs	.+8      	; 0x3074 <__udivmodsi4_ep>
    306c:	a2 1b       	sub	r26, r18
    306e:	b3 0b       	sbc	r27, r19
    3070:	e4 0b       	sbc	r30, r20
    3072:	f5 0b       	sbc	r31, r21

00003074 <__udivmodsi4_ep>:
    3074:	66 1f       	adc	r22, r22
    3076:	77 1f       	adc	r23, r23
    3078:	88 1f       	adc	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	1a 94       	dec	r1
    307e:	69 f7       	brne	.-38     	; 0x305a <__udivmodsi4_loop>
    3080:	60 95       	com	r22
    3082:	70 95       	com	r23
    3084:	80 95       	com	r24
    3086:	90 95       	com	r25
    3088:	9b 01       	movw	r18, r22
    308a:	ac 01       	movw	r20, r24
    308c:	bd 01       	movw	r22, r26
    308e:	cf 01       	movw	r24, r30
    3090:	08 95       	ret

00003092 <__prologue_saves__>:
    3092:	2f 92       	push	r2
    3094:	3f 92       	push	r3
    3096:	4f 92       	push	r4
    3098:	5f 92       	push	r5
    309a:	6f 92       	push	r6
    309c:	7f 92       	push	r7
    309e:	8f 92       	push	r8
    30a0:	9f 92       	push	r9
    30a2:	af 92       	push	r10
    30a4:	bf 92       	push	r11
    30a6:	cf 92       	push	r12
    30a8:	df 92       	push	r13
    30aa:	ef 92       	push	r14
    30ac:	ff 92       	push	r15
    30ae:	0f 93       	push	r16
    30b0:	1f 93       	push	r17
    30b2:	cf 93       	push	r28
    30b4:	df 93       	push	r29
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	ca 1b       	sub	r28, r26
    30bc:	db 0b       	sbc	r29, r27
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	09 94       	ijmp

000030ca <__epilogue_restores__>:
    30ca:	2a 88       	ldd	r2, Y+18	; 0x12
    30cc:	39 88       	ldd	r3, Y+17	; 0x11
    30ce:	48 88       	ldd	r4, Y+16	; 0x10
    30d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30da:	aa 84       	ldd	r10, Y+10	; 0x0a
    30dc:	b9 84       	ldd	r11, Y+9	; 0x09
    30de:	c8 84       	ldd	r12, Y+8	; 0x08
    30e0:	df 80       	ldd	r13, Y+7	; 0x07
    30e2:	ee 80       	ldd	r14, Y+6	; 0x06
    30e4:	fd 80       	ldd	r15, Y+5	; 0x05
    30e6:	0c 81       	ldd	r16, Y+4	; 0x04
    30e8:	1b 81       	ldd	r17, Y+3	; 0x03
    30ea:	aa 81       	ldd	r26, Y+2	; 0x02
    30ec:	b9 81       	ldd	r27, Y+1	; 0x01
    30ee:	ce 0f       	add	r28, r30
    30f0:	d1 1d       	adc	r29, r1
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	ed 01       	movw	r28, r26
    30fe:	08 95       	ret

00003100 <strcmp>:
    3100:	fb 01       	movw	r30, r22
    3102:	dc 01       	movw	r26, r24
    3104:	8d 91       	ld	r24, X+
    3106:	01 90       	ld	r0, Z+
    3108:	80 19       	sub	r24, r0
    310a:	01 10       	cpse	r0, r1
    310c:	d9 f3       	breq	.-10     	; 0x3104 <strcmp+0x4>
    310e:	99 0b       	sbc	r25, r25
    3110:	08 95       	ret

00003112 <_exit>:
    3112:	f8 94       	cli

00003114 <__stop_program>:
    3114:	ff cf       	rjmp	.-2      	; 0x3114 <__stop_program>
